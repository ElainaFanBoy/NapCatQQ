// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "entity/file.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.File
 */
export interface File {
    /**
     * @generated from protobuf oneof: uri
     */
    uri: {
        oneofKind: "url";
        /**
         * @generated from protobuf field: string url = 1;
         */
        url: string;
    } | {
        oneofKind: "cacheId";
        /**
         * @generated from protobuf field: string cacheId = 2;
         */
        cacheId: string;
    } | {
        oneofKind: "raw";
        /**
         * @generated from protobuf field: bytes raw = 3;
         */
        raw: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("Laana.File", [
            { no: 1, name: "url", kind: "scalar", oneof: "uri", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cacheId", kind: "scalar", oneof: "uri", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "raw", kind: "scalar", oneof: "uri", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uri = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.uri = {
                        oneofKind: "url",
                        url: reader.string()
                    };
                    break;
                case /* string cacheId */ 2:
                    message.uri = {
                        oneofKind: "cacheId",
                        cacheId: reader.string()
                    };
                    break;
                case /* bytes raw */ 3:
                    message.uri = {
                        oneofKind: "raw",
                        raw: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.uri.oneofKind === "url")
            writer.tag(1, WireType.LengthDelimited).string(message.uri.url);
        /* string cacheId = 2; */
        if (message.uri.oneofKind === "cacheId")
            writer.tag(2, WireType.LengthDelimited).string(message.uri.cacheId);
        /* bytes raw = 3; */
        if (message.uri.oneofKind === "raw")
            writer.tag(3, WireType.LengthDelimited).bytes(message.uri.raw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.File
 */
export const File = new File$Type();
