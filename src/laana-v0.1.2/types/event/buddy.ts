// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "event/buddy.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.BuddyAddedEvent
 */
export interface BuddyAddedEvent {
    /**
     * @generated from protobuf field: string buddyUin = 1;
     */
    buddyUin: string;
}
/**
 * @generated from protobuf message Laana.BuddyMessageWithdrawEvent
 */
export interface BuddyMessageWithdrawEvent {
    /**
     * @generated from protobuf field: string messageId = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string operatorUin = 2;
     */
    operatorUin: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BuddyAddedEvent$Type extends MessageType<BuddyAddedEvent> {
    constructor() {
        super("Laana.BuddyAddedEvent", [
            { no: 1, name: "buddyUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BuddyAddedEvent>): BuddyAddedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.buddyUin = "";
        if (value !== undefined)
            reflectionMergePartial<BuddyAddedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuddyAddedEvent): BuddyAddedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string buddyUin */ 1:
                    message.buddyUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuddyAddedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string buddyUin = 1; */
        if (message.buddyUin !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buddyUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.BuddyAddedEvent
 */
export const BuddyAddedEvent = new BuddyAddedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuddyMessageWithdrawEvent$Type extends MessageType<BuddyMessageWithdrawEvent> {
    constructor() {
        super("Laana.BuddyMessageWithdrawEvent", [
            { no: 1, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BuddyMessageWithdrawEvent>): BuddyMessageWithdrawEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<BuddyMessageWithdrawEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuddyMessageWithdrawEvent): BuddyMessageWithdrawEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string messageId */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string operatorUin */ 2:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuddyMessageWithdrawEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string messageId = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string operatorUin = 2; */
        if (message.operatorUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.BuddyMessageWithdrawEvent
 */
export const BuddyMessageWithdrawEvent = new BuddyMessageWithdrawEvent$Type();
