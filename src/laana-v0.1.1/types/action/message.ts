// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "action/message.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Message } from "../entity/message";
import { ForwardMessageRef } from "../entity/message";
import { Peer } from "../entity/message";
import { MusicCard } from "../entity/message";
import { File } from "../entity/file";
import { MarketFace } from "../entity/message";
import { SingleImage } from "../entity/message";
import { NormalFile } from "../entity/message";
import { Bubble } from "../entity/message";
/**
 * @generated from protobuf message Laana.OutgoingMessage
 */
export interface OutgoingMessage {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "bubble";
        /**
         * @generated from protobuf field: Laana.Bubble bubble = 11;
         */
        bubble: Bubble;
    } | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: Laana.NormalFile file = 12;
         */
        file: NormalFile;
    } | {
        oneofKind: "singleImage";
        /**
         * @generated from protobuf field: Laana.SingleImage singleImage = 13;
         */
        singleImage: SingleImage;
    } | {
        oneofKind: "marketFace";
        /**
         * @generated from protobuf field: Laana.MarketFace marketFace = 14;
         */
        marketFace: MarketFace;
    } | {
        oneofKind: "video";
        /**
         * @generated from protobuf field: Laana.File video = 15;
         */
        video: File;
    } | {
        oneofKind: "voice";
        /**
         * @generated from protobuf field: Laana.File voice = 16;
         */
        voice: File;
    } | {
        oneofKind: "musicCard";
        /**
         * LinkCard linkCard = 17; - unable, needs signature
         * ContactCard contactCard = 18; - unable, needs signature
         *
         * @generated from protobuf field: Laana.MusicCard musicCard = 19;
         */
        musicCard: MusicCard; // LocationCard locationCard = 20; - unable, needs signature
        // ForwardMessageRef forwardMsgRef = 21; - unable, use packed messages instead
        // XmlMessage xmlMessage = 22;
        // JsonMessage jsonMessage = 23;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.SendMessagePing
 */
export interface SendMessagePing {
    /**
     * @generated from protobuf field: Laana.Peer targetPeer = 1;
     */
    targetPeer?: Peer;
    /**
     * @generated from protobuf field: Laana.OutgoingMessage message = 2;
     */
    message?: OutgoingMessage;
}
/**
 * @generated from protobuf message Laana.SendMessagePong
 */
export interface SendMessagePong {
    /**
     * @generated from protobuf field: string msgId = 1;
     */
    msgId: string;
    /**
     * @generated from protobuf oneof: fileCacheId
     */
    fileCacheId: {
        oneofKind: "fromBubbleSegments";
        /**
         * @generated from protobuf field: Laana.SendMessagePong.BubbleSegmentsFileCacheRef fromBubbleSegments = 11;
         */
        fromBubbleSegments: SendMessagePong_BubbleSegmentsFileCacheRef;
    } | {
        oneofKind: "fromSingleFile";
        /**
         * @generated from protobuf field: string fromSingleFile = 12;
         */
        fromSingleFile: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.SendMessagePong.BubbleSegmentsFileCacheRef
 */
export interface SendMessagePong_BubbleSegmentsFileCacheRef {
    /**
     * @generated from protobuf field: repeated string fileCacheIds = 1;
     */
    fileCacheIds: string[];
}
/**
 * @generated from protobuf message Laana.SendPackedMessagesPing
 */
export interface SendPackedMessagesPing {
    /**
     * @generated from protobuf field: Laana.Peer targetPeer = 1;
     */
    targetPeer?: Peer;
    /**
     * @generated from protobuf field: repeated Laana.OutgoingMessage messages = 2;
     */
    messages: OutgoingMessage[];
}
/**
 * @generated from protobuf message Laana.SendPackedMessagesPong
 */
export interface SendPackedMessagesPong {
    /**
     * @generated from protobuf field: string packedMsgId = 1;
     */
    packedMsgId: string;
    /**
     * @generated from protobuf field: Laana.ForwardMessageRef forwardMsgRef = 2;
     */
    forwardMsgRef?: ForwardMessageRef;
    /**
     * @generated from protobuf field: repeated Laana.SendMessagePong messagePongs = 3;
     */
    messagePongs: SendMessagePong[];
}
/**
 * @generated from protobuf message Laana.GetMessagePing
 */
export interface GetMessagePing {
    /**
     * @generated from protobuf field: string msgId = 1;
     */
    msgId: string;
}
/**
 * @generated from protobuf message Laana.GetMessagePong
 */
export interface GetMessagePong {
    /**
     * @generated from protobuf field: Laana.Message message = 1;
     */
    message?: Message;
}
/**
 * @generated from protobuf message Laana.GetMessagesPing
 */
export interface GetMessagesPing {
    /**
     * @generated from protobuf field: repeated string msgIds = 1;
     */
    msgIds: string[];
}
/**
 * @generated from protobuf message Laana.GetMessagesPong
 */
export interface GetMessagesPong {
    /**
     * @generated from protobuf field: repeated Laana.Message messages = 1;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message Laana.GetHistoryMessagesPing
 */
export interface GetHistoryMessagesPing {
    /**
     * @generated from protobuf field: Laana.Peer targetPeer = 1;
     */
    targetPeer?: Peer;
    /**
     * @generated from protobuf field: string lastMsgId = 2;
     */
    lastMsgId: string;
    /**
     * @generated from protobuf field: uint32 count = 3;
     */
    count: number;
}
/**
 * @generated from protobuf message Laana.GetHistoryMessagesPong
 */
export interface GetHistoryMessagesPong {
    /**
     * @generated from protobuf field: repeated Laana.Message messages = 1;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message Laana.WithdrawMessagePing
 */
export interface WithdrawMessagePing {
    /**
     * @generated from protobuf field: string msgId = 1;
     */
    msgId: string;
}
/**
 * @generated from protobuf message Laana.MarkPeerMessageAsReadPing
 */
export interface MarkPeerMessageAsReadPing {
    /**
     * @generated from protobuf field: Laana.Peer peer = 1;
     */
    peer?: Peer;
}
/**
 * @generated from protobuf message Laana.ForwardMessagePing
 */
export interface ForwardMessagePing {
    /**
     * @generated from protobuf field: Laana.ForwardMessagePing.Operation operation = 1;
     */
    operation: ForwardMessagePing_Operation;
    /**
     * @generated from protobuf field: repeated string msgIds = 2;
     */
    msgIds: string[];
    /**
     * @generated from protobuf field: Laana.Peer targetPeer = 3;
     */
    targetPeer?: Peer;
}
/**
 * @generated from protobuf enum Laana.ForwardMessagePing.Operation
 */
export enum ForwardMessagePing_Operation {
    /**
     * @generated from protobuf enum value: AS_SINGLETONS = 0;
     */
    AS_SINGLETONS = 0,
    /**
     * @generated from protobuf enum value: AS_PACKED = 1;
     */
    AS_PACKED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class OutgoingMessage$Type extends MessageType<OutgoingMessage> {
    constructor() {
        super("Laana.OutgoingMessage", [
            { no: 11, name: "bubble", kind: "message", oneof: "content", T: () => Bubble },
            { no: 12, name: "file", kind: "message", oneof: "content", T: () => NormalFile },
            { no: 13, name: "singleImage", kind: "message", oneof: "content", T: () => SingleImage },
            { no: 14, name: "marketFace", kind: "message", oneof: "content", T: () => MarketFace },
            { no: 15, name: "video", kind: "message", oneof: "content", T: () => File },
            { no: 16, name: "voice", kind: "message", oneof: "content", T: () => File },
            { no: 19, name: "musicCard", kind: "message", oneof: "content", T: () => MusicCard }
        ]);
    }
    create(value?: PartialMessage<OutgoingMessage>): OutgoingMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<OutgoingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OutgoingMessage): OutgoingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Bubble bubble */ 11:
                    message.content = {
                        oneofKind: "bubble",
                        bubble: Bubble.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).bubble)
                    };
                    break;
                case /* Laana.NormalFile file */ 12:
                    message.content = {
                        oneofKind: "file",
                        file: NormalFile.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).file)
                    };
                    break;
                case /* Laana.SingleImage singleImage */ 13:
                    message.content = {
                        oneofKind: "singleImage",
                        singleImage: SingleImage.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).singleImage)
                    };
                    break;
                case /* Laana.MarketFace marketFace */ 14:
                    message.content = {
                        oneofKind: "marketFace",
                        marketFace: MarketFace.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).marketFace)
                    };
                    break;
                case /* Laana.File video */ 15:
                    message.content = {
                        oneofKind: "video",
                        video: File.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).video)
                    };
                    break;
                case /* Laana.File voice */ 16:
                    message.content = {
                        oneofKind: "voice",
                        voice: File.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).voice)
                    };
                    break;
                case /* Laana.MusicCard musicCard */ 19:
                    message.content = {
                        oneofKind: "musicCard",
                        musicCard: MusicCard.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).musicCard)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OutgoingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Bubble bubble = 11; */
        if (message.content.oneofKind === "bubble")
            Bubble.internalBinaryWrite(message.content.bubble, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* Laana.NormalFile file = 12; */
        if (message.content.oneofKind === "file")
            NormalFile.internalBinaryWrite(message.content.file, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SingleImage singleImage = 13; */
        if (message.content.oneofKind === "singleImage")
            SingleImage.internalBinaryWrite(message.content.singleImage, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* Laana.MarketFace marketFace = 14; */
        if (message.content.oneofKind === "marketFace")
            MarketFace.internalBinaryWrite(message.content.marketFace, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* Laana.File video = 15; */
        if (message.content.oneofKind === "video")
            File.internalBinaryWrite(message.content.video, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* Laana.File voice = 16; */
        if (message.content.oneofKind === "voice")
            File.internalBinaryWrite(message.content.voice, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* Laana.MusicCard musicCard = 19; */
        if (message.content.oneofKind === "musicCard")
            MusicCard.internalBinaryWrite(message.content.musicCard, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.OutgoingMessage
 */
export const OutgoingMessage = new OutgoingMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessagePing$Type extends MessageType<SendMessagePing> {
    constructor() {
        super("Laana.SendMessagePing", [
            { no: 1, name: "targetPeer", kind: "message", T: () => Peer },
            { no: 2, name: "message", kind: "message", T: () => OutgoingMessage }
        ]);
    }
    create(value?: PartialMessage<SendMessagePing>): SendMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessagePing): SendMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Peer targetPeer */ 1:
                    message.targetPeer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.targetPeer);
                    break;
                case /* Laana.OutgoingMessage message */ 2:
                    message.message = OutgoingMessage.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Peer targetPeer = 1; */
        if (message.targetPeer)
            Peer.internalBinaryWrite(message.targetPeer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Laana.OutgoingMessage message = 2; */
        if (message.message)
            OutgoingMessage.internalBinaryWrite(message.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SendMessagePing
 */
export const SendMessagePing = new SendMessagePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessagePong$Type extends MessageType<SendMessagePong> {
    constructor() {
        super("Laana.SendMessagePong", [
            { no: 1, name: "msgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "fromBubbleSegments", kind: "message", oneof: "fileCacheId", T: () => SendMessagePong_BubbleSegmentsFileCacheRef },
            { no: 12, name: "fromSingleFile", kind: "scalar", oneof: "fileCacheId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessagePong>): SendMessagePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = "";
        message.fileCacheId = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SendMessagePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessagePong): SendMessagePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msgId */ 1:
                    message.msgId = reader.string();
                    break;
                case /* Laana.SendMessagePong.BubbleSegmentsFileCacheRef fromBubbleSegments */ 11:
                    message.fileCacheId = {
                        oneofKind: "fromBubbleSegments",
                        fromBubbleSegments: SendMessagePong_BubbleSegmentsFileCacheRef.internalBinaryRead(reader, reader.uint32(), options, (message.fileCacheId as any).fromBubbleSegments)
                    };
                    break;
                case /* string fromSingleFile */ 12:
                    message.fileCacheId = {
                        oneofKind: "fromSingleFile",
                        fromSingleFile: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessagePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msgId = 1; */
        if (message.msgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgId);
        /* Laana.SendMessagePong.BubbleSegmentsFileCacheRef fromBubbleSegments = 11; */
        if (message.fileCacheId.oneofKind === "fromBubbleSegments")
            SendMessagePong_BubbleSegmentsFileCacheRef.internalBinaryWrite(message.fileCacheId.fromBubbleSegments, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string fromSingleFile = 12; */
        if (message.fileCacheId.oneofKind === "fromSingleFile")
            writer.tag(12, WireType.LengthDelimited).string(message.fileCacheId.fromSingleFile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SendMessagePong
 */
export const SendMessagePong = new SendMessagePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessagePong_BubbleSegmentsFileCacheRef$Type extends MessageType<SendMessagePong_BubbleSegmentsFileCacheRef> {
    constructor() {
        super("Laana.SendMessagePong.BubbleSegmentsFileCacheRef", [
            { no: 1, name: "fileCacheIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessagePong_BubbleSegmentsFileCacheRef>): SendMessagePong_BubbleSegmentsFileCacheRef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileCacheIds = [];
        if (value !== undefined)
            reflectionMergePartial<SendMessagePong_BubbleSegmentsFileCacheRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessagePong_BubbleSegmentsFileCacheRef): SendMessagePong_BubbleSegmentsFileCacheRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string fileCacheIds */ 1:
                    message.fileCacheIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessagePong_BubbleSegmentsFileCacheRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string fileCacheIds = 1; */
        for (let i = 0; i < message.fileCacheIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.fileCacheIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SendMessagePong.BubbleSegmentsFileCacheRef
 */
export const SendMessagePong_BubbleSegmentsFileCacheRef = new SendMessagePong_BubbleSegmentsFileCacheRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendPackedMessagesPing$Type extends MessageType<SendPackedMessagesPing> {
    constructor() {
        super("Laana.SendPackedMessagesPing", [
            { no: 1, name: "targetPeer", kind: "message", T: () => Peer },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OutgoingMessage }
        ]);
    }
    create(value?: PartialMessage<SendPackedMessagesPing>): SendPackedMessagesPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<SendPackedMessagesPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendPackedMessagesPing): SendPackedMessagesPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Peer targetPeer */ 1:
                    message.targetPeer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.targetPeer);
                    break;
                case /* repeated Laana.OutgoingMessage messages */ 2:
                    message.messages.push(OutgoingMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendPackedMessagesPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Peer targetPeer = 1; */
        if (message.targetPeer)
            Peer.internalBinaryWrite(message.targetPeer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Laana.OutgoingMessage messages = 2; */
        for (let i = 0; i < message.messages.length; i++)
            OutgoingMessage.internalBinaryWrite(message.messages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SendPackedMessagesPing
 */
export const SendPackedMessagesPing = new SendPackedMessagesPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendPackedMessagesPong$Type extends MessageType<SendPackedMessagesPong> {
    constructor() {
        super("Laana.SendPackedMessagesPong", [
            { no: 1, name: "packedMsgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "forwardMsgRef", kind: "message", T: () => ForwardMessageRef },
            { no: 3, name: "messagePongs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SendMessagePong }
        ]);
    }
    create(value?: PartialMessage<SendPackedMessagesPong>): SendPackedMessagesPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packedMsgId = "";
        message.messagePongs = [];
        if (value !== undefined)
            reflectionMergePartial<SendPackedMessagesPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendPackedMessagesPong): SendPackedMessagesPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string packedMsgId */ 1:
                    message.packedMsgId = reader.string();
                    break;
                case /* Laana.ForwardMessageRef forwardMsgRef */ 2:
                    message.forwardMsgRef = ForwardMessageRef.internalBinaryRead(reader, reader.uint32(), options, message.forwardMsgRef);
                    break;
                case /* repeated Laana.SendMessagePong messagePongs */ 3:
                    message.messagePongs.push(SendMessagePong.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendPackedMessagesPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string packedMsgId = 1; */
        if (message.packedMsgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packedMsgId);
        /* Laana.ForwardMessageRef forwardMsgRef = 2; */
        if (message.forwardMsgRef)
            ForwardMessageRef.internalBinaryWrite(message.forwardMsgRef, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated Laana.SendMessagePong messagePongs = 3; */
        for (let i = 0; i < message.messagePongs.length; i++)
            SendMessagePong.internalBinaryWrite(message.messagePongs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SendPackedMessagesPong
 */
export const SendPackedMessagesPong = new SendPackedMessagesPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagePing$Type extends MessageType<GetMessagePing> {
    constructor() {
        super("Laana.GetMessagePing", [
            { no: 1, name: "msgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMessagePing>): GetMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = "";
        if (value !== undefined)
            reflectionMergePartial<GetMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagePing): GetMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msgId */ 1:
                    message.msgId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msgId = 1; */
        if (message.msgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetMessagePing
 */
export const GetMessagePing = new GetMessagePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagePong$Type extends MessageType<GetMessagePong> {
    constructor() {
        super("Laana.GetMessagePong", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetMessagePong>): GetMessagePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMessagePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagePong): GetMessagePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetMessagePong
 */
export const GetMessagePong = new GetMessagePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagesPing$Type extends MessageType<GetMessagesPing> {
    constructor() {
        super("Laana.GetMessagesPing", [
            { no: 1, name: "msgIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMessagesPing>): GetMessagesPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetMessagesPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagesPing): GetMessagesPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string msgIds */ 1:
                    message.msgIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagesPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string msgIds = 1; */
        for (let i = 0; i < message.msgIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.msgIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetMessagesPing
 */
export const GetMessagesPing = new GetMessagesPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagesPong$Type extends MessageType<GetMessagesPong> {
    constructor() {
        super("Laana.GetMessagesPong", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetMessagesPong>): GetMessagesPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetMessagesPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagesPong): GetMessagesPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagesPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetMessagesPong
 */
export const GetMessagesPong = new GetMessagesPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHistoryMessagesPing$Type extends MessageType<GetHistoryMessagesPing> {
    constructor() {
        super("Laana.GetHistoryMessagesPing", [
            { no: 1, name: "targetPeer", kind: "message", T: () => Peer },
            { no: 2, name: "lastMsgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetHistoryMessagesPing>): GetHistoryMessagesPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastMsgId = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<GetHistoryMessagesPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHistoryMessagesPing): GetHistoryMessagesPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Peer targetPeer */ 1:
                    message.targetPeer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.targetPeer);
                    break;
                case /* string lastMsgId */ 2:
                    message.lastMsgId = reader.string();
                    break;
                case /* uint32 count */ 3:
                    message.count = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHistoryMessagesPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Peer targetPeer = 1; */
        if (message.targetPeer)
            Peer.internalBinaryWrite(message.targetPeer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string lastMsgId = 2; */
        if (message.lastMsgId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastMsgId);
        /* uint32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).uint32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetHistoryMessagesPing
 */
export const GetHistoryMessagesPing = new GetHistoryMessagesPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHistoryMessagesPong$Type extends MessageType<GetHistoryMessagesPong> {
    constructor() {
        super("Laana.GetHistoryMessagesPong", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetHistoryMessagesPong>): GetHistoryMessagesPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetHistoryMessagesPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHistoryMessagesPong): GetHistoryMessagesPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHistoryMessagesPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetHistoryMessagesPong
 */
export const GetHistoryMessagesPong = new GetHistoryMessagesPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WithdrawMessagePing$Type extends MessageType<WithdrawMessagePing> {
    constructor() {
        super("Laana.WithdrawMessagePing", [
            { no: 1, name: "msgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WithdrawMessagePing>): WithdrawMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = "";
        if (value !== undefined)
            reflectionMergePartial<WithdrawMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WithdrawMessagePing): WithdrawMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msgId */ 1:
                    message.msgId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WithdrawMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msgId = 1; */
        if (message.msgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.WithdrawMessagePing
 */
export const WithdrawMessagePing = new WithdrawMessagePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPeerMessageAsReadPing$Type extends MessageType<MarkPeerMessageAsReadPing> {
    constructor() {
        super("Laana.MarkPeerMessageAsReadPing", [
            { no: 1, name: "peer", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<MarkPeerMessageAsReadPing>): MarkPeerMessageAsReadPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MarkPeerMessageAsReadPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPeerMessageAsReadPing): MarkPeerMessageAsReadPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Peer peer */ 1:
                    message.peer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkPeerMessageAsReadPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Peer peer = 1; */
        if (message.peer)
            Peer.internalBinaryWrite(message.peer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.MarkPeerMessageAsReadPing
 */
export const MarkPeerMessageAsReadPing = new MarkPeerMessageAsReadPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForwardMessagePing$Type extends MessageType<ForwardMessagePing> {
    constructor() {
        super("Laana.ForwardMessagePing", [
            { no: 1, name: "operation", kind: "enum", T: () => ["Laana.ForwardMessagePing.Operation", ForwardMessagePing_Operation] },
            { no: 2, name: "msgIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "targetPeer", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<ForwardMessagePing>): ForwardMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.operation = 0;
        message.msgIds = [];
        if (value !== undefined)
            reflectionMergePartial<ForwardMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardMessagePing): ForwardMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.ForwardMessagePing.Operation operation */ 1:
                    message.operation = reader.int32();
                    break;
                case /* repeated string msgIds */ 2:
                    message.msgIds.push(reader.string());
                    break;
                case /* Laana.Peer targetPeer */ 3:
                    message.targetPeer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.targetPeer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForwardMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.ForwardMessagePing.Operation operation = 1; */
        if (message.operation !== 0)
            writer.tag(1, WireType.Varint).int32(message.operation);
        /* repeated string msgIds = 2; */
        for (let i = 0; i < message.msgIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.msgIds[i]);
        /* Laana.Peer targetPeer = 3; */
        if (message.targetPeer)
            Peer.internalBinaryWrite(message.targetPeer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ForwardMessagePing
 */
export const ForwardMessagePing = new ForwardMessagePing$Type();
