// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "entity/message.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { File } from "./file";
/**
 * @generated from protobuf message Laana.Peer
 */
export interface Peer {
    /**
     * @generated from protobuf field: Laana.Peer.Type type = 1;
     */
    type: Peer_Type;
    /**
     * @generated from protobuf field: string uin = 2;
     */
    uin: string;
}
/**
 * @generated from protobuf enum Laana.Peer.Type
 */
export enum Peer_Type {
    /**
     * @generated from protobuf enum value: BUDDY = 0;
     */
    BUDDY = 0,
    /**
     * @generated from protobuf enum value: GROUP = 1;
     */
    GROUP = 1
}
/**
 * @generated from protobuf message Laana.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string msgId = 1;
     */
    msgId: string;
    /**
     * @generated from protobuf field: uint64 time = 2;
     */
    time: bigint;
    /**
     * @generated from protobuf field: string senderUin = 3;
     */
    senderUin: string;
    /**
     * @generated from protobuf field: Laana.Peer peer = 4;
     */
    peer?: Peer;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "bubble";
        /**
         * @generated from protobuf field: Laana.Bubble bubble = 11;
         */
        bubble: Bubble;
    } | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: Laana.NormalFile file = 12;
         */
        file: NormalFile;
    } | {
        oneofKind: "singleImage";
        /**
         * @generated from protobuf field: Laana.SingleImage singleImage = 13;
         */
        singleImage: SingleImage;
    } | {
        oneofKind: "marketFace";
        /**
         * @generated from protobuf field: Laana.MarketFace marketFace = 14;
         */
        marketFace: MarketFace;
    } | {
        oneofKind: "video";
        /**
         * @generated from protobuf field: Laana.Video video = 15;
         */
        video: Video;
    } | {
        oneofKind: "voice";
        /**
         * @generated from protobuf field: Laana.Voice voice = 16;
         */
        voice: Voice;
    } | {
        oneofKind: "linkCard";
        /**
         * @generated from protobuf field: Laana.LinkCard linkCard = 17;
         */
        linkCard: LinkCard;
    } | {
        oneofKind: "contactCard";
        /**
         * @generated from protobuf field: Laana.ContactCard contactCard = 18;
         */
        contactCard: ContactCard;
    } | {
        oneofKind: "musicCard";
        /**
         * @generated from protobuf field: Laana.MusicCard musicCard = 19;
         */
        musicCard: MusicCard;
    } | {
        oneofKind: "locationCard";
        /**
         * @generated from protobuf field: Laana.LocationCard locationCard = 20;
         */
        locationCard: LocationCard;
    } | {
        oneofKind: "forwardMsgRef";
        /**
         * @generated from protobuf field: Laana.ForwardMessageRef forwardMsgRef = 21;
         */
        forwardMsgRef: ForwardMessageRef;
    } | {
        oneofKind: "xmlMessage";
        /**
         * @generated from protobuf field: Laana.XmlMessage xmlMessage = 22;
         */
        xmlMessage: XmlMessage;
    } | {
        oneofKind: "jsonMessage";
        /**
         * @generated from protobuf field: Laana.JsonMessage jsonMessage = 23;
         */
        jsonMessage: JsonMessage;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.Bubble
 */
export interface Bubble {
    /**
     * @generated from protobuf field: repeated Laana.Bubble.Segment segments = 1;
     */
    segments: Bubble_Segment[];
    /**
     * @generated from protobuf field: optional string repliedMsgId = 2;
     */
    repliedMsgId?: string;
}
/**
 * @generated from protobuf message Laana.Bubble.Segment
 */
export interface Bubble_Segment {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string;
    } | {
        oneofKind: "face";
        /**
         * @generated from protobuf field: uint32 face = 2;
         */
        face: number;
    } | {
        oneofKind: "at";
        /**
         * @generated from protobuf field: Laana.Bubble.Segment.At at = 3;
         */
        at: Bubble_Segment_At;
    } | {
        oneofKind: "image";
        /**
         * @generated from protobuf field: Laana.File image = 4;
         */
        image: File;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.Bubble.Segment.At
 */
export interface Bubble_Segment_At {
    /**
     * @generated from protobuf field: string uin = 1;
     */
    uin: string;
    /**
     * @generated from protobuf field: string groupCode = 2;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message Laana.NormalFile
 */
export interface NormalFile {
    /**
     * @generated from protobuf field: Laana.File file = 1;
     */
    file?: File;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: uint64 size = 3;
     */
    size: bigint;
}
/**
 * @generated from protobuf message Laana.SingleImage
 */
export interface SingleImage {
    /**
     * @generated from protobuf field: Laana.File image = 1;
     */
    image?: File;
    /**
     * @generated from protobuf field: string displayText = 2;
     */
    displayText: string;
}
/**
 * @generated from protobuf message Laana.MarketFace
 */
export interface MarketFace {
    /**
     * @generated from protobuf field: uint32 facePackageId = 1;
     */
    facePackageId: number;
    /**
     * @generated from protobuf field: string faceId = 2;
     */
    faceId: string;
    /**
     * @generated from protobuf field: string faceKey = 3;
     */
    faceKey: string;
    /**
     * @generated from protobuf field: string displayText = 11;
     */
    displayText: string;
}
/**
 * @generated from protobuf message Laana.Video
 */
export interface Video {
    /**
     * @generated from protobuf field: Laana.File video = 1;
     */
    video?: File;
    /**
     * @generated from protobuf field: optional uint32 duration = 2;
     */
    duration?: number;
}
/**
 * @generated from protobuf message Laana.Voice
 */
export interface Voice {
    /**
     * @generated from protobuf field: Laana.File voice = 1;
     */
    voice?: File;
    /**
     * @generated from protobuf field: uint32 duration = 2;
     */
    duration: number;
}
/**
 * @generated from protobuf message Laana.LinkCard
 */
export interface LinkCard {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string description = 3;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional Laana.File image = 4;
     */
    image?: File;
}
/**
 * @generated from protobuf message Laana.ContactCard
 */
export interface ContactCard {
    /**
     * @generated from protobuf field: Laana.ContactCard.Type type = 1;
     */
    type: ContactCard_Type;
    /**
     * @generated from protobuf field: string uin = 2;
     */
    uin: string;
}
/**
 * @generated from protobuf enum Laana.ContactCard.Type
 */
export enum ContactCard_Type {
    /**
     * @generated from protobuf enum value: BUDDY = 0;
     */
    BUDDY = 0,
    /**
     * @generated from protobuf enum value: GROUP = 1;
     */
    GROUP = 1
}
/**
 * @generated from protobuf message Laana.MusicCard
 */
export interface MusicCard {
    /**
     * @generated from protobuf field: Laana.MusicCard.Source source = 1;
     */
    source: MusicCard_Source;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf enum Laana.MusicCard.Source
 */
export enum MusicCard_Source {
    /**
     * @generated from protobuf enum value: QQ_MUSIC = 0;
     */
    QQ_MUSIC = 0,
    /**
     * @generated from protobuf enum value: NETEASE_MUSIC = 1;
     */
    NETEASE_MUSIC = 1,
    /**
     * @generated from protobuf enum value: CUSTOM = 2;
     */
    CUSTOM = 2
}
/**
 * @generated from protobuf message Laana.LocationCard
 */
export interface LocationCard {
    /**
     * @generated from protobuf field: double latitude = 1;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string address = 4;
     */
    address: string;
}
/**
 * @generated from protobuf message Laana.ForwardMessageRef
 */
export interface ForwardMessageRef {
    /**
     * @generated from protobuf field: string refId = 1;
     */
    refId: string;
    /**
     * @generated from protobuf field: string displayText = 11;
     */
    displayText: string;
}
/**
 * @generated from protobuf message Laana.ForwardMessage
 */
export interface ForwardMessage {
    /**
     * @generated from protobuf field: string refId = 1;
     */
    refId: string;
    /**
     * @generated from protobuf field: repeated Laana.Message messages = 11;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message Laana.XmlMessage
 */
export interface XmlMessage {
    /**
     * @generated from protobuf field: string xml = 1;
     */
    xml: string;
}
/**
 * @generated from protobuf message Laana.JsonMessage
 */
export interface JsonMessage {
    /**
     * @generated from protobuf field: string json = 1;
     */
    json: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Peer$Type extends MessageType<Peer> {
    constructor() {
        super("Laana.Peer", [
            { no: 1, name: "type", kind: "enum", T: () => ["Laana.Peer.Type", Peer_Type] },
            { no: 2, name: "uin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Peer>): Peer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.uin = "";
        if (value !== undefined)
            reflectionMergePartial<Peer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Peer): Peer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.Peer.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string uin */ 2:
                    message.uin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Peer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.Peer.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string uin = 2; */
        if (message.uin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Peer
 */
export const Peer = new Peer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("Laana.Message", [
            { no: 1, name: "msgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "senderUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "peer", kind: "message", T: () => Peer },
            { no: 11, name: "bubble", kind: "message", oneof: "content", T: () => Bubble },
            { no: 12, name: "file", kind: "message", oneof: "content", T: () => NormalFile },
            { no: 13, name: "singleImage", kind: "message", oneof: "content", T: () => SingleImage },
            { no: 14, name: "marketFace", kind: "message", oneof: "content", T: () => MarketFace },
            { no: 15, name: "video", kind: "message", oneof: "content", T: () => Video },
            { no: 16, name: "voice", kind: "message", oneof: "content", T: () => Voice },
            { no: 17, name: "linkCard", kind: "message", oneof: "content", T: () => LinkCard },
            { no: 18, name: "contactCard", kind: "message", oneof: "content", T: () => ContactCard },
            { no: 19, name: "musicCard", kind: "message", oneof: "content", T: () => MusicCard },
            { no: 20, name: "locationCard", kind: "message", oneof: "content", T: () => LocationCard },
            { no: 21, name: "forwardMsgRef", kind: "message", oneof: "content", T: () => ForwardMessageRef },
            { no: 22, name: "xmlMessage", kind: "message", oneof: "content", T: () => XmlMessage },
            { no: 23, name: "jsonMessage", kind: "message", oneof: "content", T: () => JsonMessage }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = "";
        message.time = 0n;
        message.senderUin = "";
        message.content = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msgId */ 1:
                    message.msgId = reader.string();
                    break;
                case /* uint64 time */ 2:
                    message.time = reader.uint64().toBigInt();
                    break;
                case /* string senderUin */ 3:
                    message.senderUin = reader.string();
                    break;
                case /* Laana.Peer peer */ 4:
                    message.peer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peer);
                    break;
                case /* Laana.Bubble bubble */ 11:
                    message.content = {
                        oneofKind: "bubble",
                        bubble: Bubble.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).bubble)
                    };
                    break;
                case /* Laana.NormalFile file */ 12:
                    message.content = {
                        oneofKind: "file",
                        file: NormalFile.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).file)
                    };
                    break;
                case /* Laana.SingleImage singleImage */ 13:
                    message.content = {
                        oneofKind: "singleImage",
                        singleImage: SingleImage.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).singleImage)
                    };
                    break;
                case /* Laana.MarketFace marketFace */ 14:
                    message.content = {
                        oneofKind: "marketFace",
                        marketFace: MarketFace.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).marketFace)
                    };
                    break;
                case /* Laana.Video video */ 15:
                    message.content = {
                        oneofKind: "video",
                        video: Video.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).video)
                    };
                    break;
                case /* Laana.Voice voice */ 16:
                    message.content = {
                        oneofKind: "voice",
                        voice: Voice.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).voice)
                    };
                    break;
                case /* Laana.LinkCard linkCard */ 17:
                    message.content = {
                        oneofKind: "linkCard",
                        linkCard: LinkCard.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).linkCard)
                    };
                    break;
                case /* Laana.ContactCard contactCard */ 18:
                    message.content = {
                        oneofKind: "contactCard",
                        contactCard: ContactCard.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).contactCard)
                    };
                    break;
                case /* Laana.MusicCard musicCard */ 19:
                    message.content = {
                        oneofKind: "musicCard",
                        musicCard: MusicCard.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).musicCard)
                    };
                    break;
                case /* Laana.LocationCard locationCard */ 20:
                    message.content = {
                        oneofKind: "locationCard",
                        locationCard: LocationCard.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).locationCard)
                    };
                    break;
                case /* Laana.ForwardMessageRef forwardMsgRef */ 21:
                    message.content = {
                        oneofKind: "forwardMsgRef",
                        forwardMsgRef: ForwardMessageRef.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).forwardMsgRef)
                    };
                    break;
                case /* Laana.XmlMessage xmlMessage */ 22:
                    message.content = {
                        oneofKind: "xmlMessage",
                        xmlMessage: XmlMessage.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).xmlMessage)
                    };
                    break;
                case /* Laana.JsonMessage jsonMessage */ 23:
                    message.content = {
                        oneofKind: "jsonMessage",
                        jsonMessage: JsonMessage.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).jsonMessage)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msgId = 1; */
        if (message.msgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgId);
        /* uint64 time = 2; */
        if (message.time !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.time);
        /* string senderUin = 3; */
        if (message.senderUin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderUin);
        /* Laana.Peer peer = 4; */
        if (message.peer)
            Peer.internalBinaryWrite(message.peer, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Laana.Bubble bubble = 11; */
        if (message.content.oneofKind === "bubble")
            Bubble.internalBinaryWrite(message.content.bubble, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* Laana.NormalFile file = 12; */
        if (message.content.oneofKind === "file")
            NormalFile.internalBinaryWrite(message.content.file, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SingleImage singleImage = 13; */
        if (message.content.oneofKind === "singleImage")
            SingleImage.internalBinaryWrite(message.content.singleImage, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* Laana.MarketFace marketFace = 14; */
        if (message.content.oneofKind === "marketFace")
            MarketFace.internalBinaryWrite(message.content.marketFace, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* Laana.Video video = 15; */
        if (message.content.oneofKind === "video")
            Video.internalBinaryWrite(message.content.video, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* Laana.Voice voice = 16; */
        if (message.content.oneofKind === "voice")
            Voice.internalBinaryWrite(message.content.voice, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* Laana.LinkCard linkCard = 17; */
        if (message.content.oneofKind === "linkCard")
            LinkCard.internalBinaryWrite(message.content.linkCard, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* Laana.ContactCard contactCard = 18; */
        if (message.content.oneofKind === "contactCard")
            ContactCard.internalBinaryWrite(message.content.contactCard, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* Laana.MusicCard musicCard = 19; */
        if (message.content.oneofKind === "musicCard")
            MusicCard.internalBinaryWrite(message.content.musicCard, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* Laana.LocationCard locationCard = 20; */
        if (message.content.oneofKind === "locationCard")
            LocationCard.internalBinaryWrite(message.content.locationCard, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* Laana.ForwardMessageRef forwardMsgRef = 21; */
        if (message.content.oneofKind === "forwardMsgRef")
            ForwardMessageRef.internalBinaryWrite(message.content.forwardMsgRef, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* Laana.XmlMessage xmlMessage = 22; */
        if (message.content.oneofKind === "xmlMessage")
            XmlMessage.internalBinaryWrite(message.content.xmlMessage, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* Laana.JsonMessage jsonMessage = 23; */
        if (message.content.oneofKind === "jsonMessage")
            JsonMessage.internalBinaryWrite(message.content.jsonMessage, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bubble$Type extends MessageType<Bubble> {
    constructor() {
        super("Laana.Bubble", [
            { no: 1, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bubble_Segment },
            { no: 2, name: "repliedMsgId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Bubble>): Bubble {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.segments = [];
        if (value !== undefined)
            reflectionMergePartial<Bubble>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bubble): Bubble {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.Bubble.Segment segments */ 1:
                    message.segments.push(Bubble_Segment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string repliedMsgId */ 2:
                    message.repliedMsgId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bubble, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.Bubble.Segment segments = 1; */
        for (let i = 0; i < message.segments.length; i++)
            Bubble_Segment.internalBinaryWrite(message.segments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string repliedMsgId = 2; */
        if (message.repliedMsgId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.repliedMsgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Bubble
 */
export const Bubble = new Bubble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bubble_Segment$Type extends MessageType<Bubble_Segment> {
    constructor() {
        super("Laana.Bubble.Segment", [
            { no: 1, name: "text", kind: "scalar", oneof: "content", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "face", kind: "scalar", oneof: "content", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "at", kind: "message", oneof: "content", T: () => Bubble_Segment_At },
            { no: 4, name: "image", kind: "message", oneof: "content", T: () => File }
        ]);
    }
    create(value?: PartialMessage<Bubble_Segment>): Bubble_Segment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Bubble_Segment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bubble_Segment): Bubble_Segment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.content = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* uint32 face */ 2:
                    message.content = {
                        oneofKind: "face",
                        face: reader.uint32()
                    };
                    break;
                case /* Laana.Bubble.Segment.At at */ 3:
                    message.content = {
                        oneofKind: "at",
                        at: Bubble_Segment_At.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).at)
                    };
                    break;
                case /* Laana.File image */ 4:
                    message.content = {
                        oneofKind: "image",
                        image: File.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).image)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bubble_Segment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.content.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.content.text);
        /* uint32 face = 2; */
        if (message.content.oneofKind === "face")
            writer.tag(2, WireType.Varint).uint32(message.content.face);
        /* Laana.Bubble.Segment.At at = 3; */
        if (message.content.oneofKind === "at")
            Bubble_Segment_At.internalBinaryWrite(message.content.at, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Laana.File image = 4; */
        if (message.content.oneofKind === "image")
            File.internalBinaryWrite(message.content.image, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Bubble.Segment
 */
export const Bubble_Segment = new Bubble_Segment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bubble_Segment_At$Type extends MessageType<Bubble_Segment_At> {
    constructor() {
        super("Laana.Bubble.Segment.At", [
            { no: 1, name: "uin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Bubble_Segment_At>): Bubble_Segment_At {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uin = "";
        message.groupCode = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Bubble_Segment_At>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bubble_Segment_At): Bubble_Segment_At {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uin */ 1:
                    message.uin = reader.string();
                    break;
                case /* string groupCode */ 2:
                    message.groupCode = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bubble_Segment_At, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uin = 1; */
        if (message.uin !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uin);
        /* string groupCode = 2; */
        if (message.groupCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupCode);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Bubble.Segment.At
 */
export const Bubble_Segment_At = new Bubble_Segment_At$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalFile$Type extends MessageType<NormalFile> {
    constructor() {
        super("Laana.NormalFile", [
            { no: 1, name: "file", kind: "message", T: () => File },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NormalFile>): NormalFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<NormalFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalFile): NormalFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.File file */ 1:
                    message.file = File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.File file = 1; */
        if (message.file)
            File.internalBinaryWrite(message.file, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.NormalFile
 */
export const NormalFile = new NormalFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SingleImage$Type extends MessageType<SingleImage> {
    constructor() {
        super("Laana.SingleImage", [
            { no: 1, name: "image", kind: "message", T: () => File },
            { no: 2, name: "displayText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SingleImage>): SingleImage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.displayText = "";
        if (value !== undefined)
            reflectionMergePartial<SingleImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SingleImage): SingleImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.File image */ 1:
                    message.image = File.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string displayText */ 2:
                    message.displayText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SingleImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.File image = 1; */
        if (message.image)
            File.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string displayText = 2; */
        if (message.displayText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SingleImage
 */
export const SingleImage = new SingleImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketFace$Type extends MessageType<MarketFace> {
    constructor() {
        super("Laana.MarketFace", [
            { no: 1, name: "facePackageId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "faceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "faceKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "displayText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MarketFace>): MarketFace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.facePackageId = 0;
        message.faceId = "";
        message.faceKey = "";
        message.displayText = "";
        if (value !== undefined)
            reflectionMergePartial<MarketFace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketFace): MarketFace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 facePackageId */ 1:
                    message.facePackageId = reader.uint32();
                    break;
                case /* string faceId */ 2:
                    message.faceId = reader.string();
                    break;
                case /* string faceKey */ 3:
                    message.faceKey = reader.string();
                    break;
                case /* string displayText */ 11:
                    message.displayText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketFace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 facePackageId = 1; */
        if (message.facePackageId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.facePackageId);
        /* string faceId = 2; */
        if (message.faceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.faceId);
        /* string faceKey = 3; */
        if (message.faceKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.faceKey);
        /* string displayText = 11; */
        if (message.displayText !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.displayText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.MarketFace
 */
export const MarketFace = new MarketFace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Video$Type extends MessageType<Video> {
    constructor() {
        super("Laana.Video", [
            { no: 1, name: "video", kind: "message", T: () => File },
            { no: 2, name: "duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Video>): Video {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Video>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Video): Video {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.File video */ 1:
                    message.video = File.internalBinaryRead(reader, reader.uint32(), options, message.video);
                    break;
                case /* optional uint32 duration */ 2:
                    message.duration = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Video, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.File video = 1; */
        if (message.video)
            File.internalBinaryWrite(message.video, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 duration = 2; */
        if (message.duration !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Video
 */
export const Video = new Video$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Voice$Type extends MessageType<Voice> {
    constructor() {
        super("Laana.Voice", [
            { no: 1, name: "voice", kind: "message", T: () => File },
            { no: 2, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Voice>): Voice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.duration = 0;
        if (value !== undefined)
            reflectionMergePartial<Voice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Voice): Voice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.File voice */ 1:
                    message.voice = File.internalBinaryRead(reader, reader.uint32(), options, message.voice);
                    break;
                case /* uint32 duration */ 2:
                    message.duration = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Voice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.File voice = 1; */
        if (message.voice)
            File.internalBinaryWrite(message.voice, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).uint32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Voice
 */
export const Voice = new Voice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkCard$Type extends MessageType<LinkCard> {
    constructor() {
        super("Laana.LinkCard", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<LinkCard>): LinkCard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<LinkCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkCard): LinkCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 3:
                    message.description = reader.string();
                    break;
                case /* optional Laana.File image */ 4:
                    message.image = File.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* optional string description = 3; */
        if (message.description !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* optional Laana.File image = 4; */
        if (message.image)
            File.internalBinaryWrite(message.image, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.LinkCard
 */
export const LinkCard = new LinkCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContactCard$Type extends MessageType<ContactCard> {
    constructor() {
        super("Laana.ContactCard", [
            { no: 1, name: "type", kind: "enum", T: () => ["Laana.ContactCard.Type", ContactCard_Type] },
            { no: 2, name: "uin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContactCard>): ContactCard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.uin = "";
        if (value !== undefined)
            reflectionMergePartial<ContactCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactCard): ContactCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.ContactCard.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string uin */ 2:
                    message.uin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.ContactCard.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string uin = 2; */
        if (message.uin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ContactCard
 */
export const ContactCard = new ContactCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicCard$Type extends MessageType<MusicCard> {
    constructor() {
        super("Laana.MusicCard", [
            { no: 1, name: "source", kind: "enum", T: () => ["Laana.MusicCard.Source", MusicCard_Source] },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MusicCard>): MusicCard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.source = 0;
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<MusicCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicCard): MusicCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.MusicCard.Source source */ 1:
                    message.source = reader.int32();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.MusicCard.Source source = 1; */
        if (message.source !== 0)
            writer.tag(1, WireType.Varint).int32(message.source);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.MusicCard
 */
export const MusicCard = new MusicCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocationCard$Type extends MessageType<LocationCard> {
    constructor() {
        super("Laana.LocationCard", [
            { no: 1, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocationCard>): LocationCard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.latitude = 0;
        message.longitude = 0;
        message.title = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<LocationCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocationCard): LocationCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double latitude */ 1:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 2:
                    message.longitude = reader.double();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string address */ 4:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocationCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double latitude = 1; */
        if (message.latitude !== 0)
            writer.tag(1, WireType.Bit64).double(message.latitude);
        /* double longitude = 2; */
        if (message.longitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.longitude);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string address = 4; */
        if (message.address !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.LocationCard
 */
export const LocationCard = new LocationCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForwardMessageRef$Type extends MessageType<ForwardMessageRef> {
    constructor() {
        super("Laana.ForwardMessageRef", [
            { no: 1, name: "refId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "displayText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ForwardMessageRef>): ForwardMessageRef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.refId = "";
        message.displayText = "";
        if (value !== undefined)
            reflectionMergePartial<ForwardMessageRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardMessageRef): ForwardMessageRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refId */ 1:
                    message.refId = reader.string();
                    break;
                case /* string displayText */ 11:
                    message.displayText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForwardMessageRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refId = 1; */
        if (message.refId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refId);
        /* string displayText = 11; */
        if (message.displayText !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.displayText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ForwardMessageRef
 */
export const ForwardMessageRef = new ForwardMessageRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForwardMessage$Type extends MessageType<ForwardMessage> {
    constructor() {
        super("Laana.ForwardMessage", [
            { no: 1, name: "refId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<ForwardMessage>): ForwardMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.refId = "";
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<ForwardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardMessage): ForwardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refId */ 1:
                    message.refId = reader.string();
                    break;
                case /* repeated Laana.Message messages */ 11:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForwardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refId = 1; */
        if (message.refId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refId);
        /* repeated Laana.Message messages = 11; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ForwardMessage
 */
export const ForwardMessage = new ForwardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class XmlMessage$Type extends MessageType<XmlMessage> {
    constructor() {
        super("Laana.XmlMessage", [
            { no: 1, name: "xml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<XmlMessage>): XmlMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.xml = "";
        if (value !== undefined)
            reflectionMergePartial<XmlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: XmlMessage): XmlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string xml */ 1:
                    message.xml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: XmlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string xml = 1; */
        if (message.xml !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.xml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.XmlMessage
 */
export const XmlMessage = new XmlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JsonMessage$Type extends MessageType<JsonMessage> {
    constructor() {
        super("Laana.JsonMessage", [
            { no: 1, name: "json", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JsonMessage>): JsonMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.json = "";
        if (value !== undefined)
            reflectionMergePartial<JsonMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JsonMessage): JsonMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string json */ 1:
                    message.json = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JsonMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string json = 1; */
        if (message.json !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.json);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.JsonMessage
 */
export const JsonMessage = new JsonMessage$Type();
