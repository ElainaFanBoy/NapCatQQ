// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "entity/group.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.Group
 */
export interface Group {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string groupName = 2;
     */
    groupName: string;
    /**
     * @generated from protobuf field: uint32 memberCount = 3;
     */
    memberCount: number;
    /**
     * @generated from protobuf field: uint32 maxMemberCount = 4;
     */
    maxMemberCount: number;
    /**
     * @generated from protobuf field: optional string groupRemark = 11;
     */
    groupRemark?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Group$Type extends MessageType<Group> {
    constructor() {
        super("Laana.Group", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groupName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "memberCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "maxMemberCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "groupRemark", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Group>): Group {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.groupName = "";
        message.memberCount = 0;
        message.maxMemberCount = 0;
        if (value !== undefined)
            reflectionMergePartial<Group>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Group): Group {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string groupName */ 2:
                    message.groupName = reader.string();
                    break;
                case /* uint32 memberCount */ 3:
                    message.memberCount = reader.uint32();
                    break;
                case /* uint32 maxMemberCount */ 4:
                    message.maxMemberCount = reader.uint32();
                    break;
                case /* optional string groupRemark */ 11:
                    message.groupRemark = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Group, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string groupName = 2; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* uint32 memberCount = 3; */
        if (message.memberCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.memberCount);
        /* uint32 maxMemberCount = 4; */
        if (message.maxMemberCount !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxMemberCount);
        /* optional string groupRemark = 11; */
        if (message.groupRemark !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.groupRemark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.Group
 */
export const Group = new Group$Type();
