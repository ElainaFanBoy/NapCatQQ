// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "action/group.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Message } from "../entity/message";
import { File } from "../entity/file";
import { UserEntity } from "../entity/user";
/**
 * @generated from protobuf message Laana.GetGroupMemberUinsPing
 */
export interface GetGroupMemberUinsPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
}
/**
 * @generated from protobuf message Laana.GetGroupMemberUinsPong
 */
export interface GetGroupMemberUinsPong {
    /**
     * @generated from protobuf field: repeated string memberUins = 1;
     */
    memberUins: string[];
}
/**
 * @generated from protobuf message Laana.GetGroupMemberInfoPing
 */
export interface GetGroupMemberInfoPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
}
/**
 * @generated from protobuf message Laana.GetGroupMemberInfoPong
 */
export interface GetGroupMemberInfoPong {
    /**
     * @generated from protobuf field: Laana.UserEntity member = 1;
     */
    member?: UserEntity;
}
/**
 * @generated from protobuf message Laana.GetAllGroupMembersInfoPing
 */
export interface GetAllGroupMembersInfoPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
}
/**
 * @generated from protobuf message Laana.GetAllGroupMembersInfoPong
 */
export interface GetAllGroupMembersInfoPong {
    /**
     * @generated from protobuf field: repeated Laana.UserEntity members = 1;
     */
    members: UserEntity[];
}
/**
 * @generated from protobuf message Laana.SetGroupNamePing
 */
export interface SetGroupNamePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message Laana.SetGroupAvatarPing
 */
export interface SetGroupAvatarPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: Laana.File avatar = 2;
     */
    avatar?: File;
}
/**
 * @generated from protobuf message Laana.SetGroupAvatarPong
 */
export interface SetGroupAvatarPong {
    /**
     * @generated from protobuf field: string avatarCacheId = 1;
     */
    avatarCacheId: string;
}
/**
 * @generated from protobuf message Laana.SetGroupAdminPing
 */
export interface SetGroupAdminPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
    /**
     * @generated from protobuf field: Laana.SetGroupAdminPing.Operation operation = 3;
     */
    operation: SetGroupAdminPing_Operation;
}
/**
 * @generated from protobuf enum Laana.SetGroupAdminPing.Operation
 */
export enum SetGroupAdminPing_Operation {
    /**
     * @generated from protobuf enum value: SET = 0;
     */
    SET = 0,
    /**
     * @generated from protobuf enum value: UNSET = 1;
     */
    UNSET = 1
}
/**
 * @generated from protobuf message Laana.SetGroupMemberCardPing
 */
export interface SetGroupMemberCardPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
    /**
     * @generated from protobuf field: string card = 3;
     */
    card: string;
}
/**
 * @generated from protobuf message Laana.SetGroupMemberSpecialTitlePing
 */
export interface SetGroupMemberSpecialTitlePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
}
/**
 * @generated from protobuf message Laana.SetGroupMemberShutUpPing
 */
export interface SetGroupMemberShutUpPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
    /**
     * @generated from protobuf oneof: operation
     */
    operation: {
        oneofKind: "duration";
        /**
         * @generated from protobuf field: uint32 duration = 3;
         */
        duration: number;
    } | {
        oneofKind: "lift";
        /**
         * @generated from protobuf field: bool lift = 4;
         */
        lift: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.SetGroupShutUpAllPing
 */
export interface SetGroupShutUpAllPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: bool lift = 2;
     */
    lift: boolean;
}
/**
 * @generated from protobuf message Laana.KickGroupMemberPing
 */
export interface KickGroupMemberPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string memberUin = 2;
     */
    memberUin: string;
}
/**
 * @generated from protobuf message Laana.QuitGroupPing
 */
export interface QuitGroupPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
}
/**
 * @generated from protobuf message Laana.GetPaginatedGroupEssenceMessagePing
 */
export interface GetPaginatedGroupEssenceMessagePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: uint32 startIndex = 2;
     */
    startIndex: number;
    /**
     * @generated from protobuf field: uint32 maxCount = 3;
     */
    maxCount: number;
}
/**
 * @generated from protobuf message Laana.GetPaginatedGroupEssenceMessagePong
 */
export interface GetPaginatedGroupEssenceMessagePong {
    /**
     * @generated from protobuf field: repeated Laana.Message essenceMessages = 1;
     */
    essenceMessages: Message[];
}
/**
 * @generated from protobuf message Laana.GetAllGroupsEssenceMessagePing
 */
export interface GetAllGroupsEssenceMessagePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
}
/**
 * @generated from protobuf message Laana.GetAllGroupsEssenceMessagePong
 */
export interface GetAllGroupsEssenceMessagePong {
    /**
     * @generated from protobuf field: repeated Laana.Message essenceMessages = 1;
     */
    essenceMessages: Message[];
}
/**
 * @generated from protobuf message Laana.SetGroupEssenceMessagePing
 */
export interface SetGroupEssenceMessagePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMemberUinsPing$Type extends MessageType<GetGroupMemberUinsPing> {
    constructor() {
        super("Laana.GetGroupMemberUinsPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupMemberUinsPing>): GetGroupMemberUinsPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<GetGroupMemberUinsPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMemberUinsPing): GetGroupMemberUinsPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMemberUinsPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupMemberUinsPing
 */
export const GetGroupMemberUinsPing = new GetGroupMemberUinsPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMemberUinsPong$Type extends MessageType<GetGroupMemberUinsPong> {
    constructor() {
        super("Laana.GetGroupMemberUinsPong", [
            { no: 1, name: "memberUins", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupMemberUinsPong>): GetGroupMemberUinsPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.memberUins = [];
        if (value !== undefined)
            reflectionMergePartial<GetGroupMemberUinsPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMemberUinsPong): GetGroupMemberUinsPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string memberUins */ 1:
                    message.memberUins.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMemberUinsPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string memberUins = 1; */
        for (let i = 0; i < message.memberUins.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.memberUins[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupMemberUinsPong
 */
export const GetGroupMemberUinsPong = new GetGroupMemberUinsPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMemberInfoPing$Type extends MessageType<GetGroupMemberInfoPing> {
    constructor() {
        super("Laana.GetGroupMemberInfoPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupMemberInfoPing>): GetGroupMemberInfoPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        if (value !== undefined)
            reflectionMergePartial<GetGroupMemberInfoPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMemberInfoPing): GetGroupMemberInfoPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMemberInfoPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupMemberInfoPing
 */
export const GetGroupMemberInfoPing = new GetGroupMemberInfoPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMemberInfoPong$Type extends MessageType<GetGroupMemberInfoPong> {
    constructor() {
        super("Laana.GetGroupMemberInfoPong", [
            { no: 1, name: "member", kind: "message", T: () => UserEntity }
        ]);
    }
    create(value?: PartialMessage<GetGroupMemberInfoPong>): GetGroupMemberInfoPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGroupMemberInfoPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMemberInfoPong): GetGroupMemberInfoPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.UserEntity member */ 1:
                    message.member = UserEntity.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMemberInfoPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.UserEntity member = 1; */
        if (message.member)
            UserEntity.internalBinaryWrite(message.member, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupMemberInfoPong
 */
export const GetGroupMemberInfoPong = new GetGroupMemberInfoPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGroupMembersInfoPing$Type extends MessageType<GetAllGroupMembersInfoPing> {
    constructor() {
        super("Laana.GetAllGroupMembersInfoPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllGroupMembersInfoPing>): GetAllGroupMembersInfoPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<GetAllGroupMembersInfoPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllGroupMembersInfoPing): GetAllGroupMembersInfoPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllGroupMembersInfoPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetAllGroupMembersInfoPing
 */
export const GetAllGroupMembersInfoPing = new GetAllGroupMembersInfoPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGroupMembersInfoPong$Type extends MessageType<GetAllGroupMembersInfoPong> {
    constructor() {
        super("Laana.GetAllGroupMembersInfoPong", [
            { no: 1, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserEntity }
        ]);
    }
    create(value?: PartialMessage<GetAllGroupMembersInfoPong>): GetAllGroupMembersInfoPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.members = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllGroupMembersInfoPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllGroupMembersInfoPong): GetAllGroupMembersInfoPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.UserEntity members */ 1:
                    message.members.push(UserEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllGroupMembersInfoPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.UserEntity members = 1; */
        for (let i = 0; i < message.members.length; i++)
            UserEntity.internalBinaryWrite(message.members[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetAllGroupMembersInfoPong
 */
export const GetAllGroupMembersInfoPong = new GetAllGroupMembersInfoPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupNamePing$Type extends MessageType<SetGroupNamePing> {
    constructor() {
        super("Laana.SetGroupNamePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupNamePing>): SetGroupNamePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupNamePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupNamePing): SetGroupNamePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupNamePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupNamePing
 */
export const SetGroupNamePing = new SetGroupNamePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupAvatarPing$Type extends MessageType<SetGroupAvatarPing> {
    constructor() {
        super("Laana.SetGroupAvatarPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<SetGroupAvatarPing>): SetGroupAvatarPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupAvatarPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupAvatarPing): SetGroupAvatarPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* Laana.File avatar */ 2:
                    message.avatar = File.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupAvatarPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* Laana.File avatar = 2; */
        if (message.avatar)
            File.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupAvatarPing
 */
export const SetGroupAvatarPing = new SetGroupAvatarPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupAvatarPong$Type extends MessageType<SetGroupAvatarPong> {
    constructor() {
        super("Laana.SetGroupAvatarPong", [
            { no: 1, name: "avatarCacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupAvatarPong>): SetGroupAvatarPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.avatarCacheId = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupAvatarPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupAvatarPong): SetGroupAvatarPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string avatarCacheId */ 1:
                    message.avatarCacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupAvatarPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string avatarCacheId = 1; */
        if (message.avatarCacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.avatarCacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupAvatarPong
 */
export const SetGroupAvatarPong = new SetGroupAvatarPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupAdminPing$Type extends MessageType<SetGroupAdminPing> {
    constructor() {
        super("Laana.SetGroupAdminPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operation", kind: "enum", T: () => ["Laana.SetGroupAdminPing.Operation", SetGroupAdminPing_Operation] }
        ]);
    }
    create(value?: PartialMessage<SetGroupAdminPing>): SetGroupAdminPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        message.operation = 0;
        if (value !== undefined)
            reflectionMergePartial<SetGroupAdminPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupAdminPing): SetGroupAdminPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                case /* Laana.SetGroupAdminPing.Operation operation */ 3:
                    message.operation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupAdminPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        /* Laana.SetGroupAdminPing.Operation operation = 3; */
        if (message.operation !== 0)
            writer.tag(3, WireType.Varint).int32(message.operation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupAdminPing
 */
export const SetGroupAdminPing = new SetGroupAdminPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupMemberCardPing$Type extends MessageType<SetGroupMemberCardPing> {
    constructor() {
        super("Laana.SetGroupMemberCardPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "card", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupMemberCardPing>): SetGroupMemberCardPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        message.card = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupMemberCardPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupMemberCardPing): SetGroupMemberCardPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                case /* string card */ 3:
                    message.card = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupMemberCardPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        /* string card = 3; */
        if (message.card !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.card);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupMemberCardPing
 */
export const SetGroupMemberCardPing = new SetGroupMemberCardPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupMemberSpecialTitlePing$Type extends MessageType<SetGroupMemberSpecialTitlePing> {
    constructor() {
        super("Laana.SetGroupMemberSpecialTitlePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupMemberSpecialTitlePing>): SetGroupMemberSpecialTitlePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupMemberSpecialTitlePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupMemberSpecialTitlePing): SetGroupMemberSpecialTitlePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupMemberSpecialTitlePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupMemberSpecialTitlePing
 */
export const SetGroupMemberSpecialTitlePing = new SetGroupMemberSpecialTitlePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupMemberShutUpPing$Type extends MessageType<SetGroupMemberShutUpPing> {
    constructor() {
        super("Laana.SetGroupMemberShutUpPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", oneof: "operation", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "lift", kind: "scalar", oneof: "operation", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupMemberShutUpPing>): SetGroupMemberShutUpPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        message.operation = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SetGroupMemberShutUpPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupMemberShutUpPing): SetGroupMemberShutUpPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                case /* uint32 duration */ 3:
                    message.operation = {
                        oneofKind: "duration",
                        duration: reader.uint32()
                    };
                    break;
                case /* bool lift */ 4:
                    message.operation = {
                        oneofKind: "lift",
                        lift: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupMemberShutUpPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        /* uint32 duration = 3; */
        if (message.operation.oneofKind === "duration")
            writer.tag(3, WireType.Varint).uint32(message.operation.duration);
        /* bool lift = 4; */
        if (message.operation.oneofKind === "lift")
            writer.tag(4, WireType.Varint).bool(message.operation.lift);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupMemberShutUpPing
 */
export const SetGroupMemberShutUpPing = new SetGroupMemberShutUpPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupShutUpAllPing$Type extends MessageType<SetGroupShutUpAllPing> {
    constructor() {
        super("Laana.SetGroupShutUpAllPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lift", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupShutUpAllPing>): SetGroupShutUpAllPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.lift = false;
        if (value !== undefined)
            reflectionMergePartial<SetGroupShutUpAllPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupShutUpAllPing): SetGroupShutUpAllPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* bool lift */ 2:
                    message.lift = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupShutUpAllPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* bool lift = 2; */
        if (message.lift !== false)
            writer.tag(2, WireType.Varint).bool(message.lift);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupShutUpAllPing
 */
export const SetGroupShutUpAllPing = new SetGroupShutUpAllPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KickGroupMemberPing$Type extends MessageType<KickGroupMemberPing> {
    constructor() {
        super("Laana.KickGroupMemberPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KickGroupMemberPing>): KickGroupMemberPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.memberUin = "";
        if (value !== undefined)
            reflectionMergePartial<KickGroupMemberPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KickGroupMemberPing): KickGroupMemberPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string memberUin */ 2:
                    message.memberUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KickGroupMemberPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string memberUin = 2; */
        if (message.memberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.memberUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.KickGroupMemberPing
 */
export const KickGroupMemberPing = new KickGroupMemberPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuitGroupPing$Type extends MessageType<QuitGroupPing> {
    constructor() {
        super("Laana.QuitGroupPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuitGroupPing>): QuitGroupPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<QuitGroupPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuitGroupPing): QuitGroupPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuitGroupPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.QuitGroupPing
 */
export const QuitGroupPing = new QuitGroupPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPaginatedGroupEssenceMessagePing$Type extends MessageType<GetPaginatedGroupEssenceMessagePing> {
    constructor() {
        super("Laana.GetPaginatedGroupEssenceMessagePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "startIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "maxCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPaginatedGroupEssenceMessagePing>): GetPaginatedGroupEssenceMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.startIndex = 0;
        message.maxCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPaginatedGroupEssenceMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPaginatedGroupEssenceMessagePing): GetPaginatedGroupEssenceMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* uint32 startIndex */ 2:
                    message.startIndex = reader.uint32();
                    break;
                case /* uint32 maxCount */ 3:
                    message.maxCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPaginatedGroupEssenceMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* uint32 startIndex = 2; */
        if (message.startIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.startIndex);
        /* uint32 maxCount = 3; */
        if (message.maxCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.maxCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetPaginatedGroupEssenceMessagePing
 */
export const GetPaginatedGroupEssenceMessagePing = new GetPaginatedGroupEssenceMessagePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPaginatedGroupEssenceMessagePong$Type extends MessageType<GetPaginatedGroupEssenceMessagePong> {
    constructor() {
        super("Laana.GetPaginatedGroupEssenceMessagePong", [
            { no: 1, name: "essenceMessages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetPaginatedGroupEssenceMessagePong>): GetPaginatedGroupEssenceMessagePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.essenceMessages = [];
        if (value !== undefined)
            reflectionMergePartial<GetPaginatedGroupEssenceMessagePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPaginatedGroupEssenceMessagePong): GetPaginatedGroupEssenceMessagePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.Message essenceMessages */ 1:
                    message.essenceMessages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPaginatedGroupEssenceMessagePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.Message essenceMessages = 1; */
        for (let i = 0; i < message.essenceMessages.length; i++)
            Message.internalBinaryWrite(message.essenceMessages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetPaginatedGroupEssenceMessagePong
 */
export const GetPaginatedGroupEssenceMessagePong = new GetPaginatedGroupEssenceMessagePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGroupsEssenceMessagePing$Type extends MessageType<GetAllGroupsEssenceMessagePing> {
    constructor() {
        super("Laana.GetAllGroupsEssenceMessagePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllGroupsEssenceMessagePing>): GetAllGroupsEssenceMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<GetAllGroupsEssenceMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllGroupsEssenceMessagePing): GetAllGroupsEssenceMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllGroupsEssenceMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetAllGroupsEssenceMessagePing
 */
export const GetAllGroupsEssenceMessagePing = new GetAllGroupsEssenceMessagePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGroupsEssenceMessagePong$Type extends MessageType<GetAllGroupsEssenceMessagePong> {
    constructor() {
        super("Laana.GetAllGroupsEssenceMessagePong", [
            { no: 1, name: "essenceMessages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetAllGroupsEssenceMessagePong>): GetAllGroupsEssenceMessagePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.essenceMessages = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllGroupsEssenceMessagePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllGroupsEssenceMessagePong): GetAllGroupsEssenceMessagePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.Message essenceMessages */ 1:
                    message.essenceMessages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllGroupsEssenceMessagePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.Message essenceMessages = 1; */
        for (let i = 0; i < message.essenceMessages.length; i++)
            Message.internalBinaryWrite(message.essenceMessages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetAllGroupsEssenceMessagePong
 */
export const GetAllGroupsEssenceMessagePong = new GetAllGroupsEssenceMessagePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetGroupEssenceMessagePing$Type extends MessageType<SetGroupEssenceMessagePing> {
    constructor() {
        super("Laana.SetGroupEssenceMessagePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetGroupEssenceMessagePing>): SetGroupEssenceMessagePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<SetGroupEssenceMessagePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetGroupEssenceMessagePing): SetGroupEssenceMessagePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetGroupEssenceMessagePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SetGroupEssenceMessagePing
 */
export const SetGroupEssenceMessagePing = new SetGroupEssenceMessagePing$Type();
