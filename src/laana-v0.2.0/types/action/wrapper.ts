// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "action/wrapper.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CreateGroupFolderPong } from "./file";
import { UploadGroupFilePong } from "./file";
import { GetGroupFileListPong } from "./file";
import { GetFileDataPong } from "./file";
import { PrepareCacheByUrlPong } from "./file";
import { UploadCachePong } from "./file";
import { HandleGroupInvitationPong } from "./request";
import { GetAllGroupsEssenceMessagePong } from "./group";
import { GetPaginatedGroupEssenceMessagePong } from "./group";
import { SetGroupAvatarPong } from "./group";
import { GetAllGroupMembersInfoPong } from "./group";
import { GetGroupMemberInfoPong } from "./group";
import { GetGroupMemberUinsPong } from "./group";
import { GetGroupInfoPong } from "./contact";
import { GetBuddyInfoPong } from "./contact";
import { GetRecentContactListPong } from "./contact";
import { GetAllGroupsPong } from "./contact";
import { GetAllBuddiesPong } from "./contact";
import { GetHistoryMessagesPong } from "./message";
import { GetMessagesPong } from "./message";
import { GetMessagePong } from "./message";
import { SendPackedMessagesPong } from "./message";
import { SendMessagePong } from "./message";
import { DeleteGroupFolderPing } from "./file";
import { DeleteGroupFilePing } from "./file";
import { CreateGroupFolderPing } from "./file";
import { UploadGroupFilePing } from "./file";
import { GetGroupFileListPing } from "./file";
import { GetFileDataPing } from "./file";
import { DestroyCachePing } from "./file";
import { PrepareCacheByUrlPing } from "./file";
import { UploadCachePing } from "./file";
import { HandleGroupInvitationPing } from "./request";
import { HandleGroupJoinRequestPing } from "./request";
import { HandleBuddyAddRequestPing } from "./request";
import { SetGroupEssenceMessagePing } from "./group";
import { GetAllGroupsEssenceMessagePing } from "./group";
import { GetPaginatedGroupEssenceMessagePing } from "./group";
import { QuitGroupPing } from "./group";
import { KickGroupMemberPing } from "./group";
import { SetGroupShutUpAllPing } from "./group";
import { SetGroupMemberShutUpPing } from "./group";
import { SetGroupMemberSpecialTitlePing } from "./group";
import { SetGroupMemberCardPing } from "./group";
import { SetGroupAdminPing } from "./group";
import { SetGroupAvatarPing } from "./group";
import { SetGroupNamePing } from "./group";
import { GetAllGroupMembersInfoPing } from "./group";
import { GetGroupMemberInfoPing } from "./group";
import { GetGroupMemberUinsPing } from "./group";
import { GetGroupInfoPing } from "./contact";
import { GetBuddyInfoPing } from "./contact";
import { GetRecentContactListPing } from "./contact";
import { GetAllGroupsPing } from "./contact";
import { GetAllBuddiesPing } from "./contact";
import { ForwardMessagePing } from "./message";
import { MarkPeerMessageAsReadPing } from "./message";
import { WithdrawMessagePing } from "./message";
import { GetHistoryMessagesPing } from "./message";
import { GetMessagesPing } from "./message";
import { GetMessagePing } from "./message";
import { SendPackedMessagesPing } from "./message";
import { SendMessagePing } from "./message";
/**
 * @generated from protobuf message Laana.ActionPing
 */
export interface ActionPing {
    /**
     * @generated from protobuf field: string clientPingId = 1;
     */
    clientPingId: string;
    /**
     * @generated from protobuf oneof: ping
     */
    ping: {
        oneofKind: "sendMessage";
        /**
         * @generated from protobuf field: Laana.SendMessagePing sendMessage = 101;
         */
        sendMessage: SendMessagePing;
    } | {
        oneofKind: "sendPackedMessages";
        /**
         * @generated from protobuf field: Laana.SendPackedMessagesPing sendPackedMessages = 102;
         */
        sendPackedMessages: SendPackedMessagesPing;
    } | {
        oneofKind: "getMessage";
        /**
         * @generated from protobuf field: Laana.GetMessagePing getMessage = 103;
         */
        getMessage: GetMessagePing;
    } | {
        oneofKind: "getMessages";
        /**
         * @generated from protobuf field: Laana.GetMessagesPing getMessages = 104;
         */
        getMessages: GetMessagesPing;
    } | {
        oneofKind: "getHistoryMessages";
        /**
         * @generated from protobuf field: Laana.GetHistoryMessagesPing getHistoryMessages = 105;
         */
        getHistoryMessages: GetHistoryMessagesPing;
    } | {
        oneofKind: "withdrawMessage";
        /**
         * @generated from protobuf field: Laana.WithdrawMessagePing withdrawMessage = 106;
         */
        withdrawMessage: WithdrawMessagePing;
    } | {
        oneofKind: "markPeerMessageAsRead";
        /**
         * @generated from protobuf field: Laana.MarkPeerMessageAsReadPing markPeerMessageAsRead = 107;
         */
        markPeerMessageAsRead: MarkPeerMessageAsReadPing;
    } | {
        oneofKind: "forwardMessage";
        /**
         * @generated from protobuf field: Laana.ForwardMessagePing forwardMessage = 108;
         */
        forwardMessage: ForwardMessagePing;
    } | {
        oneofKind: "getAllBuddies";
        /**
         * @generated from protobuf field: Laana.GetAllBuddiesPing getAllBuddies = 201;
         */
        getAllBuddies: GetAllBuddiesPing;
    } | {
        oneofKind: "getAllGroups";
        /**
         * @generated from protobuf field: Laana.GetAllGroupsPing getAllGroups = 202;
         */
        getAllGroups: GetAllGroupsPing;
    } | {
        oneofKind: "getRecentContactList";
        /**
         * @generated from protobuf field: Laana.GetRecentContactListPing getRecentContactList = 203;
         */
        getRecentContactList: GetRecentContactListPing;
    } | {
        oneofKind: "getBuddyInfo";
        /**
         * @generated from protobuf field: Laana.GetBuddyInfoPing getBuddyInfo = 204;
         */
        getBuddyInfo: GetBuddyInfoPing;
    } | {
        oneofKind: "getGroupInfo";
        /**
         * @generated from protobuf field: Laana.GetGroupInfoPing getGroupInfo = 205;
         */
        getGroupInfo: GetGroupInfoPing;
    } | {
        oneofKind: "getGroupMemberUins";
        /**
         * @generated from protobuf field: Laana.GetGroupMemberUinsPing getGroupMemberUins = 301;
         */
        getGroupMemberUins: GetGroupMemberUinsPing;
    } | {
        oneofKind: "getGroupMemberInfo";
        /**
         * @generated from protobuf field: Laana.GetGroupMemberInfoPing getGroupMemberInfo = 302;
         */
        getGroupMemberInfo: GetGroupMemberInfoPing;
    } | {
        oneofKind: "getAllGroupMembersInfo";
        /**
         * @generated from protobuf field: Laana.GetAllGroupMembersInfoPing getAllGroupMembersInfo = 303;
         */
        getAllGroupMembersInfo: GetAllGroupMembersInfoPing;
    } | {
        oneofKind: "setGroupName";
        /**
         * @generated from protobuf field: Laana.SetGroupNamePing setGroupName = 304;
         */
        setGroupName: SetGroupNamePing;
    } | {
        oneofKind: "setGroupAvatar";
        /**
         * @generated from protobuf field: Laana.SetGroupAvatarPing setGroupAvatar = 305;
         */
        setGroupAvatar: SetGroupAvatarPing;
    } | {
        oneofKind: "setGroupAdmin";
        /**
         * @generated from protobuf field: Laana.SetGroupAdminPing setGroupAdmin = 306;
         */
        setGroupAdmin: SetGroupAdminPing;
    } | {
        oneofKind: "setGroupMemberCard";
        /**
         * @generated from protobuf field: Laana.SetGroupMemberCardPing setGroupMemberCard = 307;
         */
        setGroupMemberCard: SetGroupMemberCardPing;
    } | {
        oneofKind: "setGroupMemberSpecialTitle";
        /**
         * @generated from protobuf field: Laana.SetGroupMemberSpecialTitlePing setGroupMemberSpecialTitle = 308;
         */
        setGroupMemberSpecialTitle: SetGroupMemberSpecialTitlePing;
    } | {
        oneofKind: "setGroupMemberShutUp";
        /**
         * @generated from protobuf field: Laana.SetGroupMemberShutUpPing setGroupMemberShutUp = 309;
         */
        setGroupMemberShutUp: SetGroupMemberShutUpPing;
    } | {
        oneofKind: "setGroupShutUpAll";
        /**
         * @generated from protobuf field: Laana.SetGroupShutUpAllPing setGroupShutUpAll = 310;
         */
        setGroupShutUpAll: SetGroupShutUpAllPing;
    } | {
        oneofKind: "kickGroupMember";
        /**
         * @generated from protobuf field: Laana.KickGroupMemberPing kickGroupMember = 311;
         */
        kickGroupMember: KickGroupMemberPing;
    } | {
        oneofKind: "quitGroup";
        /**
         * @generated from protobuf field: Laana.QuitGroupPing quitGroup = 312;
         */
        quitGroup: QuitGroupPing;
    } | {
        oneofKind: "getPaginatedGroupEssenceMessage";
        /**
         * @generated from protobuf field: Laana.GetPaginatedGroupEssenceMessagePing getPaginatedGroupEssenceMessage = 313;
         */
        getPaginatedGroupEssenceMessage: GetPaginatedGroupEssenceMessagePing;
    } | {
        oneofKind: "getAllGroupsEssenceMessage";
        /**
         * @generated from protobuf field: Laana.GetAllGroupsEssenceMessagePing getAllGroupsEssenceMessage = 314;
         */
        getAllGroupsEssenceMessage: GetAllGroupsEssenceMessagePing;
    } | {
        oneofKind: "setGroupEssenceMessage";
        /**
         * @generated from protobuf field: Laana.SetGroupEssenceMessagePing setGroupEssenceMessage = 315;
         */
        setGroupEssenceMessage: SetGroupEssenceMessagePing;
    } | {
        oneofKind: "handleBuddyAddRequest";
        /**
         * @generated from protobuf field: Laana.HandleBuddyAddRequestPing handleBuddyAddRequest = 401;
         */
        handleBuddyAddRequest: HandleBuddyAddRequestPing;
    } | {
        oneofKind: "handleGroupJoinRequest";
        /**
         * @generated from protobuf field: Laana.HandleGroupJoinRequestPing handleGroupJoinRequest = 402;
         */
        handleGroupJoinRequest: HandleGroupJoinRequestPing;
    } | {
        oneofKind: "handleGroupInvitation";
        /**
         * @generated from protobuf field: Laana.HandleGroupInvitationPing handleGroupInvitation = 403;
         */
        handleGroupInvitation: HandleGroupInvitationPing;
    } | {
        oneofKind: "uploadCache";
        /**
         * @generated from protobuf field: Laana.UploadCachePing uploadCache = 501;
         */
        uploadCache: UploadCachePing;
    } | {
        oneofKind: "prepareCacheByUrl";
        /**
         * @generated from protobuf field: Laana.PrepareCacheByUrlPing prepareCacheByUrl = 502;
         */
        prepareCacheByUrl: PrepareCacheByUrlPing;
    } | {
        oneofKind: "destroyCache";
        /**
         * @generated from protobuf field: Laana.DestroyCachePing destroyCache = 503;
         */
        destroyCache: DestroyCachePing;
    } | {
        oneofKind: "getFileData";
        /**
         * @generated from protobuf field: Laana.GetFileDataPing getFileData = 504;
         */
        getFileData: GetFileDataPing;
    } | {
        oneofKind: "getGroupFileList";
        /**
         * @generated from protobuf field: Laana.GetGroupFileListPing getGroupFileList = 505;
         */
        getGroupFileList: GetGroupFileListPing;
    } | {
        oneofKind: "uploadGroupFile";
        /**
         * @generated from protobuf field: Laana.UploadGroupFilePing uploadGroupFile = 506;
         */
        uploadGroupFile: UploadGroupFilePing;
    } | {
        oneofKind: "createGroupFolder";
        /**
         * @generated from protobuf field: Laana.CreateGroupFolderPing createGroupFolder = 507;
         */
        createGroupFolder: CreateGroupFolderPing;
    } | {
        oneofKind: "deleteGroupFile";
        /**
         * @generated from protobuf field: Laana.DeleteGroupFilePing deleteGroupFile = 508;
         */
        deleteGroupFile: DeleteGroupFilePing;
    } | {
        oneofKind: "deleteGroupFolder";
        /**
         * @generated from protobuf field: Laana.DeleteGroupFolderPing deleteGroupFolder = 509;
         */
        deleteGroupFolder: DeleteGroupFolderPing;
    } | {
        oneofKind: "extendedAction";
        /**
         * @generated from protobuf field: Laana.ExtendedActionPing extendedAction = 9999;
         */
        extendedAction: ExtendedActionPing;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.ExtendedActionPing
 */
export interface ExtendedActionPing {
    /**
     * @generated from protobuf field: string actionName = 1;
     */
    actionName: string;
    /**
     * @generated from protobuf field: bytes actionData = 2;
     */
    actionData: Uint8Array;
}
/**
 * @generated from protobuf message Laana.GeneralSuccessPong
 */
export interface GeneralSuccessPong {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message Laana.FailedPong
 */
export interface FailedPong {
    /**
     * @generated from protobuf field: string reason = 1;
     */
    reason: string;
}
/**
 * @generated from protobuf message Laana.ActionPong
 */
export interface ActionPong {
    /**
     * @generated from protobuf field: string clientPingId = 1;
     */
    clientPingId: string;
    /**
     * @generated from protobuf oneof: pong
     */
    pong: {
        oneofKind: "failed";
        /**
         * @generated from protobuf field: Laana.FailedPong failed = 11;
         */
        failed: FailedPong;
    } | {
        oneofKind: "sendMessage";
        /**
         * @generated from protobuf field: Laana.SendMessagePong sendMessage = 101;
         */
        sendMessage: SendMessagePong;
    } | {
        oneofKind: "sendPackedMessages";
        /**
         * @generated from protobuf field: Laana.SendPackedMessagesPong sendPackedMessages = 102;
         */
        sendPackedMessages: SendPackedMessagesPong;
    } | {
        oneofKind: "getMessage";
        /**
         * @generated from protobuf field: Laana.GetMessagePong getMessage = 103;
         */
        getMessage: GetMessagePong;
    } | {
        oneofKind: "getMessages";
        /**
         * @generated from protobuf field: Laana.GetMessagesPong getMessages = 104;
         */
        getMessages: GetMessagesPong;
    } | {
        oneofKind: "getHistoryMessages";
        /**
         * @generated from protobuf field: Laana.GetHistoryMessagesPong getHistoryMessages = 105;
         */
        getHistoryMessages: GetHistoryMessagesPong;
    } | {
        oneofKind: "withdrawMessage";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong withdrawMessage = 106;
         */
        withdrawMessage: GeneralSuccessPong;
    } | {
        oneofKind: "markPeerMessageAsRead";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong markPeerMessageAsRead = 107;
         */
        markPeerMessageAsRead: GeneralSuccessPong;
    } | {
        oneofKind: "forwardMessage";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong forwardMessage = 108;
         */
        forwardMessage: GeneralSuccessPong;
    } | {
        oneofKind: "getAllBuddies";
        /**
         * @generated from protobuf field: Laana.GetAllBuddiesPong getAllBuddies = 201;
         */
        getAllBuddies: GetAllBuddiesPong;
    } | {
        oneofKind: "getAllGroups";
        /**
         * @generated from protobuf field: Laana.GetAllGroupsPong getAllGroups = 202;
         */
        getAllGroups: GetAllGroupsPong;
    } | {
        oneofKind: "getRecentContactList";
        /**
         * @generated from protobuf field: Laana.GetRecentContactListPong getRecentContactList = 203;
         */
        getRecentContactList: GetRecentContactListPong;
    } | {
        oneofKind: "getBuddyInfo";
        /**
         * @generated from protobuf field: Laana.GetBuddyInfoPong getBuddyInfo = 204;
         */
        getBuddyInfo: GetBuddyInfoPong;
    } | {
        oneofKind: "getGroupInfo";
        /**
         * @generated from protobuf field: Laana.GetGroupInfoPong getGroupInfo = 205;
         */
        getGroupInfo: GetGroupInfoPong;
    } | {
        oneofKind: "getGroupMemberUins";
        /**
         * @generated from protobuf field: Laana.GetGroupMemberUinsPong getGroupMemberUins = 301;
         */
        getGroupMemberUins: GetGroupMemberUinsPong;
    } | {
        oneofKind: "getGroupMemberInfo";
        /**
         * @generated from protobuf field: Laana.GetGroupMemberInfoPong getGroupMemberInfo = 302;
         */
        getGroupMemberInfo: GetGroupMemberInfoPong;
    } | {
        oneofKind: "getAllGroupMembersInfo";
        /**
         * @generated from protobuf field: Laana.GetAllGroupMembersInfoPong getAllGroupMembersInfo = 303;
         */
        getAllGroupMembersInfo: GetAllGroupMembersInfoPong;
    } | {
        oneofKind: "setGroupName";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupName = 304;
         */
        setGroupName: GeneralSuccessPong;
    } | {
        oneofKind: "setGroupAvatar";
        /**
         * @generated from protobuf field: Laana.SetGroupAvatarPong setGroupAvatar = 305;
         */
        setGroupAvatar: SetGroupAvatarPong;
    } | {
        oneofKind: "setGroupAdmin";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupAdmin = 306;
         */
        setGroupAdmin: GeneralSuccessPong;
    } | {
        oneofKind: "setGroupMemberCard";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupMemberCard = 307;
         */
        setGroupMemberCard: GeneralSuccessPong;
    } | {
        oneofKind: "setGroupMemberSpecialTitle";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupMemberSpecialTitle = 308;
         */
        setGroupMemberSpecialTitle: GeneralSuccessPong;
    } | {
        oneofKind: "setGroupMemberShutUp";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupMemberShutUp = 309;
         */
        setGroupMemberShutUp: GeneralSuccessPong;
    } | {
        oneofKind: "setGroupShutUpAll";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupShutUpAll = 310;
         */
        setGroupShutUpAll: GeneralSuccessPong;
    } | {
        oneofKind: "kickGroupMember";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong kickGroupMember = 311;
         */
        kickGroupMember: GeneralSuccessPong;
    } | {
        oneofKind: "quitGroup";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong quitGroup = 312;
         */
        quitGroup: GeneralSuccessPong;
    } | {
        oneofKind: "getPaginatedGroupEssenceMessage";
        /**
         * @generated from protobuf field: Laana.GetPaginatedGroupEssenceMessagePong getPaginatedGroupEssenceMessage = 313;
         */
        getPaginatedGroupEssenceMessage: GetPaginatedGroupEssenceMessagePong;
    } | {
        oneofKind: "getAllGroupsEssenceMessage";
        /**
         * @generated from protobuf field: Laana.GetAllGroupsEssenceMessagePong getAllGroupsEssenceMessage = 314;
         */
        getAllGroupsEssenceMessage: GetAllGroupsEssenceMessagePong;
    } | {
        oneofKind: "setGroupEssenceMessage";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong setGroupEssenceMessage = 315;
         */
        setGroupEssenceMessage: GeneralSuccessPong;
    } | {
        oneofKind: "handleBuddyAddRequest";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong handleBuddyAddRequest = 401;
         */
        handleBuddyAddRequest: GeneralSuccessPong;
    } | {
        oneofKind: "handleGroupJoinRequest";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong handleGroupJoinRequest = 402;
         */
        handleGroupJoinRequest: GeneralSuccessPong;
    } | {
        oneofKind: "handleGroupInvitation";
        /**
         * @generated from protobuf field: Laana.HandleGroupInvitationPong handleGroupInvitation = 403;
         */
        handleGroupInvitation: HandleGroupInvitationPong;
    } | {
        oneofKind: "uploadCache";
        /**
         * @generated from protobuf field: Laana.UploadCachePong uploadCache = 501;
         */
        uploadCache: UploadCachePong;
    } | {
        oneofKind: "prepareCacheByUrl";
        /**
         * @generated from protobuf field: Laana.PrepareCacheByUrlPong prepareCacheByUrl = 502;
         */
        prepareCacheByUrl: PrepareCacheByUrlPong;
    } | {
        oneofKind: "destroyCache";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong destroyCache = 503;
         */
        destroyCache: GeneralSuccessPong;
    } | {
        oneofKind: "getFileData";
        /**
         * @generated from protobuf field: Laana.GetFileDataPong getFileData = 504;
         */
        getFileData: GetFileDataPong;
    } | {
        oneofKind: "getGroupFileList";
        /**
         * @generated from protobuf field: Laana.GetGroupFileListPong getGroupFileList = 505;
         */
        getGroupFileList: GetGroupFileListPong;
    } | {
        oneofKind: "uploadGroupFile";
        /**
         * @generated from protobuf field: Laana.UploadGroupFilePong uploadGroupFile = 506;
         */
        uploadGroupFile: UploadGroupFilePong;
    } | {
        oneofKind: "createGroupFolder";
        /**
         * @generated from protobuf field: Laana.CreateGroupFolderPong createGroupFolder = 507;
         */
        createGroupFolder: CreateGroupFolderPong;
    } | {
        oneofKind: "deleteGroupFile";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong deleteGroupFile = 508;
         */
        deleteGroupFile: GeneralSuccessPong;
    } | {
        oneofKind: "deleteGroupFolder";
        /**
         * @generated from protobuf field: Laana.GeneralSuccessPong deleteGroupFolder = 509;
         */
        deleteGroupFolder: GeneralSuccessPong;
    } | {
        oneofKind: "extendedAction";
        /**
         * @generated from protobuf field: Laana.ExtendedActionPong extendedAction = 9999;
         */
        extendedAction: ExtendedActionPong;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.ExtendedActionPong
 */
export interface ExtendedActionPong {
    /**
     * @generated from protobuf field: string actionName = 1;
     */
    actionName: string;
    /**
     * @generated from protobuf field: bytes pongData = 2;
     */
    pongData: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class ActionPing$Type extends MessageType<ActionPing> {
    constructor() {
        super("Laana.ActionPing", [
            { no: 1, name: "clientPingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 101, name: "sendMessage", kind: "message", oneof: "ping", T: () => SendMessagePing },
            { no: 102, name: "sendPackedMessages", kind: "message", oneof: "ping", T: () => SendPackedMessagesPing },
            { no: 103, name: "getMessage", kind: "message", oneof: "ping", T: () => GetMessagePing },
            { no: 104, name: "getMessages", kind: "message", oneof: "ping", T: () => GetMessagesPing },
            { no: 105, name: "getHistoryMessages", kind: "message", oneof: "ping", T: () => GetHistoryMessagesPing },
            { no: 106, name: "withdrawMessage", kind: "message", oneof: "ping", T: () => WithdrawMessagePing },
            { no: 107, name: "markPeerMessageAsRead", kind: "message", oneof: "ping", T: () => MarkPeerMessageAsReadPing },
            { no: 108, name: "forwardMessage", kind: "message", oneof: "ping", T: () => ForwardMessagePing },
            { no: 201, name: "getAllBuddies", kind: "message", oneof: "ping", T: () => GetAllBuddiesPing },
            { no: 202, name: "getAllGroups", kind: "message", oneof: "ping", T: () => GetAllGroupsPing },
            { no: 203, name: "getRecentContactList", kind: "message", oneof: "ping", T: () => GetRecentContactListPing },
            { no: 204, name: "getBuddyInfo", kind: "message", oneof: "ping", T: () => GetBuddyInfoPing },
            { no: 205, name: "getGroupInfo", kind: "message", oneof: "ping", T: () => GetGroupInfoPing },
            { no: 301, name: "getGroupMemberUins", kind: "message", oneof: "ping", T: () => GetGroupMemberUinsPing },
            { no: 302, name: "getGroupMemberInfo", kind: "message", oneof: "ping", T: () => GetGroupMemberInfoPing },
            { no: 303, name: "getAllGroupMembersInfo", kind: "message", oneof: "ping", T: () => GetAllGroupMembersInfoPing },
            { no: 304, name: "setGroupName", kind: "message", oneof: "ping", T: () => SetGroupNamePing },
            { no: 305, name: "setGroupAvatar", kind: "message", oneof: "ping", T: () => SetGroupAvatarPing },
            { no: 306, name: "setGroupAdmin", kind: "message", oneof: "ping", T: () => SetGroupAdminPing },
            { no: 307, name: "setGroupMemberCard", kind: "message", oneof: "ping", T: () => SetGroupMemberCardPing },
            { no: 308, name: "setGroupMemberSpecialTitle", kind: "message", oneof: "ping", T: () => SetGroupMemberSpecialTitlePing },
            { no: 309, name: "setGroupMemberShutUp", kind: "message", oneof: "ping", T: () => SetGroupMemberShutUpPing },
            { no: 310, name: "setGroupShutUpAll", kind: "message", oneof: "ping", T: () => SetGroupShutUpAllPing },
            { no: 311, name: "kickGroupMember", kind: "message", oneof: "ping", T: () => KickGroupMemberPing },
            { no: 312, name: "quitGroup", kind: "message", oneof: "ping", T: () => QuitGroupPing },
            { no: 313, name: "getPaginatedGroupEssenceMessage", kind: "message", oneof: "ping", T: () => GetPaginatedGroupEssenceMessagePing },
            { no: 314, name: "getAllGroupsEssenceMessage", kind: "message", oneof: "ping", T: () => GetAllGroupsEssenceMessagePing },
            { no: 315, name: "setGroupEssenceMessage", kind: "message", oneof: "ping", T: () => SetGroupEssenceMessagePing },
            { no: 401, name: "handleBuddyAddRequest", kind: "message", oneof: "ping", T: () => HandleBuddyAddRequestPing },
            { no: 402, name: "handleGroupJoinRequest", kind: "message", oneof: "ping", T: () => HandleGroupJoinRequestPing },
            { no: 403, name: "handleGroupInvitation", kind: "message", oneof: "ping", T: () => HandleGroupInvitationPing },
            { no: 501, name: "uploadCache", kind: "message", oneof: "ping", T: () => UploadCachePing },
            { no: 502, name: "prepareCacheByUrl", kind: "message", oneof: "ping", T: () => PrepareCacheByUrlPing },
            { no: 503, name: "destroyCache", kind: "message", oneof: "ping", T: () => DestroyCachePing },
            { no: 504, name: "getFileData", kind: "message", oneof: "ping", T: () => GetFileDataPing },
            { no: 505, name: "getGroupFileList", kind: "message", oneof: "ping", T: () => GetGroupFileListPing },
            { no: 506, name: "uploadGroupFile", kind: "message", oneof: "ping", T: () => UploadGroupFilePing },
            { no: 507, name: "createGroupFolder", kind: "message", oneof: "ping", T: () => CreateGroupFolderPing },
            { no: 508, name: "deleteGroupFile", kind: "message", oneof: "ping", T: () => DeleteGroupFilePing },
            { no: 509, name: "deleteGroupFolder", kind: "message", oneof: "ping", T: () => DeleteGroupFolderPing },
            { no: 9999, name: "extendedAction", kind: "message", oneof: "ping", T: () => ExtendedActionPing }
        ]);
    }
    create(value?: PartialMessage<ActionPing>): ActionPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientPingId = "";
        message.ping = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ActionPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionPing): ActionPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string clientPingId */ 1:
                    message.clientPingId = reader.string();
                    break;
                case /* Laana.SendMessagePing sendMessage */ 101:
                    message.ping = {
                        oneofKind: "sendMessage",
                        sendMessage: SendMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).sendMessage)
                    };
                    break;
                case /* Laana.SendPackedMessagesPing sendPackedMessages */ 102:
                    message.ping = {
                        oneofKind: "sendPackedMessages",
                        sendPackedMessages: SendPackedMessagesPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).sendPackedMessages)
                    };
                    break;
                case /* Laana.GetMessagePing getMessage */ 103:
                    message.ping = {
                        oneofKind: "getMessage",
                        getMessage: GetMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getMessage)
                    };
                    break;
                case /* Laana.GetMessagesPing getMessages */ 104:
                    message.ping = {
                        oneofKind: "getMessages",
                        getMessages: GetMessagesPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getMessages)
                    };
                    break;
                case /* Laana.GetHistoryMessagesPing getHistoryMessages */ 105:
                    message.ping = {
                        oneofKind: "getHistoryMessages",
                        getHistoryMessages: GetHistoryMessagesPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getHistoryMessages)
                    };
                    break;
                case /* Laana.WithdrawMessagePing withdrawMessage */ 106:
                    message.ping = {
                        oneofKind: "withdrawMessage",
                        withdrawMessage: WithdrawMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).withdrawMessage)
                    };
                    break;
                case /* Laana.MarkPeerMessageAsReadPing markPeerMessageAsRead */ 107:
                    message.ping = {
                        oneofKind: "markPeerMessageAsRead",
                        markPeerMessageAsRead: MarkPeerMessageAsReadPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).markPeerMessageAsRead)
                    };
                    break;
                case /* Laana.ForwardMessagePing forwardMessage */ 108:
                    message.ping = {
                        oneofKind: "forwardMessage",
                        forwardMessage: ForwardMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).forwardMessage)
                    };
                    break;
                case /* Laana.GetAllBuddiesPing getAllBuddies */ 201:
                    message.ping = {
                        oneofKind: "getAllBuddies",
                        getAllBuddies: GetAllBuddiesPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getAllBuddies)
                    };
                    break;
                case /* Laana.GetAllGroupsPing getAllGroups */ 202:
                    message.ping = {
                        oneofKind: "getAllGroups",
                        getAllGroups: GetAllGroupsPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getAllGroups)
                    };
                    break;
                case /* Laana.GetRecentContactListPing getRecentContactList */ 203:
                    message.ping = {
                        oneofKind: "getRecentContactList",
                        getRecentContactList: GetRecentContactListPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getRecentContactList)
                    };
                    break;
                case /* Laana.GetBuddyInfoPing getBuddyInfo */ 204:
                    message.ping = {
                        oneofKind: "getBuddyInfo",
                        getBuddyInfo: GetBuddyInfoPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getBuddyInfo)
                    };
                    break;
                case /* Laana.GetGroupInfoPing getGroupInfo */ 205:
                    message.ping = {
                        oneofKind: "getGroupInfo",
                        getGroupInfo: GetGroupInfoPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getGroupInfo)
                    };
                    break;
                case /* Laana.GetGroupMemberUinsPing getGroupMemberUins */ 301:
                    message.ping = {
                        oneofKind: "getGroupMemberUins",
                        getGroupMemberUins: GetGroupMemberUinsPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getGroupMemberUins)
                    };
                    break;
                case /* Laana.GetGroupMemberInfoPing getGroupMemberInfo */ 302:
                    message.ping = {
                        oneofKind: "getGroupMemberInfo",
                        getGroupMemberInfo: GetGroupMemberInfoPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getGroupMemberInfo)
                    };
                    break;
                case /* Laana.GetAllGroupMembersInfoPing getAllGroupMembersInfo */ 303:
                    message.ping = {
                        oneofKind: "getAllGroupMembersInfo",
                        getAllGroupMembersInfo: GetAllGroupMembersInfoPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getAllGroupMembersInfo)
                    };
                    break;
                case /* Laana.SetGroupNamePing setGroupName */ 304:
                    message.ping = {
                        oneofKind: "setGroupName",
                        setGroupName: SetGroupNamePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupName)
                    };
                    break;
                case /* Laana.SetGroupAvatarPing setGroupAvatar */ 305:
                    message.ping = {
                        oneofKind: "setGroupAvatar",
                        setGroupAvatar: SetGroupAvatarPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupAvatar)
                    };
                    break;
                case /* Laana.SetGroupAdminPing setGroupAdmin */ 306:
                    message.ping = {
                        oneofKind: "setGroupAdmin",
                        setGroupAdmin: SetGroupAdminPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupAdmin)
                    };
                    break;
                case /* Laana.SetGroupMemberCardPing setGroupMemberCard */ 307:
                    message.ping = {
                        oneofKind: "setGroupMemberCard",
                        setGroupMemberCard: SetGroupMemberCardPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupMemberCard)
                    };
                    break;
                case /* Laana.SetGroupMemberSpecialTitlePing setGroupMemberSpecialTitle */ 308:
                    message.ping = {
                        oneofKind: "setGroupMemberSpecialTitle",
                        setGroupMemberSpecialTitle: SetGroupMemberSpecialTitlePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupMemberSpecialTitle)
                    };
                    break;
                case /* Laana.SetGroupMemberShutUpPing setGroupMemberShutUp */ 309:
                    message.ping = {
                        oneofKind: "setGroupMemberShutUp",
                        setGroupMemberShutUp: SetGroupMemberShutUpPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupMemberShutUp)
                    };
                    break;
                case /* Laana.SetGroupShutUpAllPing setGroupShutUpAll */ 310:
                    message.ping = {
                        oneofKind: "setGroupShutUpAll",
                        setGroupShutUpAll: SetGroupShutUpAllPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupShutUpAll)
                    };
                    break;
                case /* Laana.KickGroupMemberPing kickGroupMember */ 311:
                    message.ping = {
                        oneofKind: "kickGroupMember",
                        kickGroupMember: KickGroupMemberPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).kickGroupMember)
                    };
                    break;
                case /* Laana.QuitGroupPing quitGroup */ 312:
                    message.ping = {
                        oneofKind: "quitGroup",
                        quitGroup: QuitGroupPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).quitGroup)
                    };
                    break;
                case /* Laana.GetPaginatedGroupEssenceMessagePing getPaginatedGroupEssenceMessage */ 313:
                    message.ping = {
                        oneofKind: "getPaginatedGroupEssenceMessage",
                        getPaginatedGroupEssenceMessage: GetPaginatedGroupEssenceMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getPaginatedGroupEssenceMessage)
                    };
                    break;
                case /* Laana.GetAllGroupsEssenceMessagePing getAllGroupsEssenceMessage */ 314:
                    message.ping = {
                        oneofKind: "getAllGroupsEssenceMessage",
                        getAllGroupsEssenceMessage: GetAllGroupsEssenceMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getAllGroupsEssenceMessage)
                    };
                    break;
                case /* Laana.SetGroupEssenceMessagePing setGroupEssenceMessage */ 315:
                    message.ping = {
                        oneofKind: "setGroupEssenceMessage",
                        setGroupEssenceMessage: SetGroupEssenceMessagePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).setGroupEssenceMessage)
                    };
                    break;
                case /* Laana.HandleBuddyAddRequestPing handleBuddyAddRequest */ 401:
                    message.ping = {
                        oneofKind: "handleBuddyAddRequest",
                        handleBuddyAddRequest: HandleBuddyAddRequestPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).handleBuddyAddRequest)
                    };
                    break;
                case /* Laana.HandleGroupJoinRequestPing handleGroupJoinRequest */ 402:
                    message.ping = {
                        oneofKind: "handleGroupJoinRequest",
                        handleGroupJoinRequest: HandleGroupJoinRequestPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).handleGroupJoinRequest)
                    };
                    break;
                case /* Laana.HandleGroupInvitationPing handleGroupInvitation */ 403:
                    message.ping = {
                        oneofKind: "handleGroupInvitation",
                        handleGroupInvitation: HandleGroupInvitationPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).handleGroupInvitation)
                    };
                    break;
                case /* Laana.UploadCachePing uploadCache */ 501:
                    message.ping = {
                        oneofKind: "uploadCache",
                        uploadCache: UploadCachePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).uploadCache)
                    };
                    break;
                case /* Laana.PrepareCacheByUrlPing prepareCacheByUrl */ 502:
                    message.ping = {
                        oneofKind: "prepareCacheByUrl",
                        prepareCacheByUrl: PrepareCacheByUrlPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).prepareCacheByUrl)
                    };
                    break;
                case /* Laana.DestroyCachePing destroyCache */ 503:
                    message.ping = {
                        oneofKind: "destroyCache",
                        destroyCache: DestroyCachePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).destroyCache)
                    };
                    break;
                case /* Laana.GetFileDataPing getFileData */ 504:
                    message.ping = {
                        oneofKind: "getFileData",
                        getFileData: GetFileDataPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getFileData)
                    };
                    break;
                case /* Laana.GetGroupFileListPing getGroupFileList */ 505:
                    message.ping = {
                        oneofKind: "getGroupFileList",
                        getGroupFileList: GetGroupFileListPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).getGroupFileList)
                    };
                    break;
                case /* Laana.UploadGroupFilePing uploadGroupFile */ 506:
                    message.ping = {
                        oneofKind: "uploadGroupFile",
                        uploadGroupFile: UploadGroupFilePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).uploadGroupFile)
                    };
                    break;
                case /* Laana.CreateGroupFolderPing createGroupFolder */ 507:
                    message.ping = {
                        oneofKind: "createGroupFolder",
                        createGroupFolder: CreateGroupFolderPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).createGroupFolder)
                    };
                    break;
                case /* Laana.DeleteGroupFilePing deleteGroupFile */ 508:
                    message.ping = {
                        oneofKind: "deleteGroupFile",
                        deleteGroupFile: DeleteGroupFilePing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).deleteGroupFile)
                    };
                    break;
                case /* Laana.DeleteGroupFolderPing deleteGroupFolder */ 509:
                    message.ping = {
                        oneofKind: "deleteGroupFolder",
                        deleteGroupFolder: DeleteGroupFolderPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).deleteGroupFolder)
                    };
                    break;
                case /* Laana.ExtendedActionPing extendedAction */ 9999:
                    message.ping = {
                        oneofKind: "extendedAction",
                        extendedAction: ExtendedActionPing.internalBinaryRead(reader, reader.uint32(), options, (message.ping as any).extendedAction)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string clientPingId = 1; */
        if (message.clientPingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientPingId);
        /* Laana.SendMessagePing sendMessage = 101; */
        if (message.ping.oneofKind === "sendMessage")
            SendMessagePing.internalBinaryWrite(message.ping.sendMessage, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SendPackedMessagesPing sendPackedMessages = 102; */
        if (message.ping.oneofKind === "sendPackedMessages")
            SendPackedMessagesPing.internalBinaryWrite(message.ping.sendPackedMessages, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetMessagePing getMessage = 103; */
        if (message.ping.oneofKind === "getMessage")
            GetMessagePing.internalBinaryWrite(message.ping.getMessage, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetMessagesPing getMessages = 104; */
        if (message.ping.oneofKind === "getMessages")
            GetMessagesPing.internalBinaryWrite(message.ping.getMessages, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetHistoryMessagesPing getHistoryMessages = 105; */
        if (message.ping.oneofKind === "getHistoryMessages")
            GetHistoryMessagesPing.internalBinaryWrite(message.ping.getHistoryMessages, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* Laana.WithdrawMessagePing withdrawMessage = 106; */
        if (message.ping.oneofKind === "withdrawMessage")
            WithdrawMessagePing.internalBinaryWrite(message.ping.withdrawMessage, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* Laana.MarkPeerMessageAsReadPing markPeerMessageAsRead = 107; */
        if (message.ping.oneofKind === "markPeerMessageAsRead")
            MarkPeerMessageAsReadPing.internalBinaryWrite(message.ping.markPeerMessageAsRead, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        /* Laana.ForwardMessagePing forwardMessage = 108; */
        if (message.ping.oneofKind === "forwardMessage")
            ForwardMessagePing.internalBinaryWrite(message.ping.forwardMessage, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllBuddiesPing getAllBuddies = 201; */
        if (message.ping.oneofKind === "getAllBuddies")
            GetAllBuddiesPing.internalBinaryWrite(message.ping.getAllBuddies, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupsPing getAllGroups = 202; */
        if (message.ping.oneofKind === "getAllGroups")
            GetAllGroupsPing.internalBinaryWrite(message.ping.getAllGroups, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetRecentContactListPing getRecentContactList = 203; */
        if (message.ping.oneofKind === "getRecentContactList")
            GetRecentContactListPing.internalBinaryWrite(message.ping.getRecentContactList, writer.tag(203, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetBuddyInfoPing getBuddyInfo = 204; */
        if (message.ping.oneofKind === "getBuddyInfo")
            GetBuddyInfoPing.internalBinaryWrite(message.ping.getBuddyInfo, writer.tag(204, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupInfoPing getGroupInfo = 205; */
        if (message.ping.oneofKind === "getGroupInfo")
            GetGroupInfoPing.internalBinaryWrite(message.ping.getGroupInfo, writer.tag(205, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupMemberUinsPing getGroupMemberUins = 301; */
        if (message.ping.oneofKind === "getGroupMemberUins")
            GetGroupMemberUinsPing.internalBinaryWrite(message.ping.getGroupMemberUins, writer.tag(301, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupMemberInfoPing getGroupMemberInfo = 302; */
        if (message.ping.oneofKind === "getGroupMemberInfo")
            GetGroupMemberInfoPing.internalBinaryWrite(message.ping.getGroupMemberInfo, writer.tag(302, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupMembersInfoPing getAllGroupMembersInfo = 303; */
        if (message.ping.oneofKind === "getAllGroupMembersInfo")
            GetAllGroupMembersInfoPing.internalBinaryWrite(message.ping.getAllGroupMembersInfo, writer.tag(303, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupNamePing setGroupName = 304; */
        if (message.ping.oneofKind === "setGroupName")
            SetGroupNamePing.internalBinaryWrite(message.ping.setGroupName, writer.tag(304, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupAvatarPing setGroupAvatar = 305; */
        if (message.ping.oneofKind === "setGroupAvatar")
            SetGroupAvatarPing.internalBinaryWrite(message.ping.setGroupAvatar, writer.tag(305, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupAdminPing setGroupAdmin = 306; */
        if (message.ping.oneofKind === "setGroupAdmin")
            SetGroupAdminPing.internalBinaryWrite(message.ping.setGroupAdmin, writer.tag(306, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupMemberCardPing setGroupMemberCard = 307; */
        if (message.ping.oneofKind === "setGroupMemberCard")
            SetGroupMemberCardPing.internalBinaryWrite(message.ping.setGroupMemberCard, writer.tag(307, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupMemberSpecialTitlePing setGroupMemberSpecialTitle = 308; */
        if (message.ping.oneofKind === "setGroupMemberSpecialTitle")
            SetGroupMemberSpecialTitlePing.internalBinaryWrite(message.ping.setGroupMemberSpecialTitle, writer.tag(308, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupMemberShutUpPing setGroupMemberShutUp = 309; */
        if (message.ping.oneofKind === "setGroupMemberShutUp")
            SetGroupMemberShutUpPing.internalBinaryWrite(message.ping.setGroupMemberShutUp, writer.tag(309, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupShutUpAllPing setGroupShutUpAll = 310; */
        if (message.ping.oneofKind === "setGroupShutUpAll")
            SetGroupShutUpAllPing.internalBinaryWrite(message.ping.setGroupShutUpAll, writer.tag(310, WireType.LengthDelimited).fork(), options).join();
        /* Laana.KickGroupMemberPing kickGroupMember = 311; */
        if (message.ping.oneofKind === "kickGroupMember")
            KickGroupMemberPing.internalBinaryWrite(message.ping.kickGroupMember, writer.tag(311, WireType.LengthDelimited).fork(), options).join();
        /* Laana.QuitGroupPing quitGroup = 312; */
        if (message.ping.oneofKind === "quitGroup")
            QuitGroupPing.internalBinaryWrite(message.ping.quitGroup, writer.tag(312, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetPaginatedGroupEssenceMessagePing getPaginatedGroupEssenceMessage = 313; */
        if (message.ping.oneofKind === "getPaginatedGroupEssenceMessage")
            GetPaginatedGroupEssenceMessagePing.internalBinaryWrite(message.ping.getPaginatedGroupEssenceMessage, writer.tag(313, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupsEssenceMessagePing getAllGroupsEssenceMessage = 314; */
        if (message.ping.oneofKind === "getAllGroupsEssenceMessage")
            GetAllGroupsEssenceMessagePing.internalBinaryWrite(message.ping.getAllGroupsEssenceMessage, writer.tag(314, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupEssenceMessagePing setGroupEssenceMessage = 315; */
        if (message.ping.oneofKind === "setGroupEssenceMessage")
            SetGroupEssenceMessagePing.internalBinaryWrite(message.ping.setGroupEssenceMessage, writer.tag(315, WireType.LengthDelimited).fork(), options).join();
        /* Laana.HandleBuddyAddRequestPing handleBuddyAddRequest = 401; */
        if (message.ping.oneofKind === "handleBuddyAddRequest")
            HandleBuddyAddRequestPing.internalBinaryWrite(message.ping.handleBuddyAddRequest, writer.tag(401, WireType.LengthDelimited).fork(), options).join();
        /* Laana.HandleGroupJoinRequestPing handleGroupJoinRequest = 402; */
        if (message.ping.oneofKind === "handleGroupJoinRequest")
            HandleGroupJoinRequestPing.internalBinaryWrite(message.ping.handleGroupJoinRequest, writer.tag(402, WireType.LengthDelimited).fork(), options).join();
        /* Laana.HandleGroupInvitationPing handleGroupInvitation = 403; */
        if (message.ping.oneofKind === "handleGroupInvitation")
            HandleGroupInvitationPing.internalBinaryWrite(message.ping.handleGroupInvitation, writer.tag(403, WireType.LengthDelimited).fork(), options).join();
        /* Laana.UploadCachePing uploadCache = 501; */
        if (message.ping.oneofKind === "uploadCache")
            UploadCachePing.internalBinaryWrite(message.ping.uploadCache, writer.tag(501, WireType.LengthDelimited).fork(), options).join();
        /* Laana.PrepareCacheByUrlPing prepareCacheByUrl = 502; */
        if (message.ping.oneofKind === "prepareCacheByUrl")
            PrepareCacheByUrlPing.internalBinaryWrite(message.ping.prepareCacheByUrl, writer.tag(502, WireType.LengthDelimited).fork(), options).join();
        /* Laana.DestroyCachePing destroyCache = 503; */
        if (message.ping.oneofKind === "destroyCache")
            DestroyCachePing.internalBinaryWrite(message.ping.destroyCache, writer.tag(503, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetFileDataPing getFileData = 504; */
        if (message.ping.oneofKind === "getFileData")
            GetFileDataPing.internalBinaryWrite(message.ping.getFileData, writer.tag(504, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupFileListPing getGroupFileList = 505; */
        if (message.ping.oneofKind === "getGroupFileList")
            GetGroupFileListPing.internalBinaryWrite(message.ping.getGroupFileList, writer.tag(505, WireType.LengthDelimited).fork(), options).join();
        /* Laana.UploadGroupFilePing uploadGroupFile = 506; */
        if (message.ping.oneofKind === "uploadGroupFile")
            UploadGroupFilePing.internalBinaryWrite(message.ping.uploadGroupFile, writer.tag(506, WireType.LengthDelimited).fork(), options).join();
        /* Laana.CreateGroupFolderPing createGroupFolder = 507; */
        if (message.ping.oneofKind === "createGroupFolder")
            CreateGroupFolderPing.internalBinaryWrite(message.ping.createGroupFolder, writer.tag(507, WireType.LengthDelimited).fork(), options).join();
        /* Laana.DeleteGroupFilePing deleteGroupFile = 508; */
        if (message.ping.oneofKind === "deleteGroupFile")
            DeleteGroupFilePing.internalBinaryWrite(message.ping.deleteGroupFile, writer.tag(508, WireType.LengthDelimited).fork(), options).join();
        /* Laana.DeleteGroupFolderPing deleteGroupFolder = 509; */
        if (message.ping.oneofKind === "deleteGroupFolder")
            DeleteGroupFolderPing.internalBinaryWrite(message.ping.deleteGroupFolder, writer.tag(509, WireType.LengthDelimited).fork(), options).join();
        /* Laana.ExtendedActionPing extendedAction = 9999; */
        if (message.ping.oneofKind === "extendedAction")
            ExtendedActionPing.internalBinaryWrite(message.ping.extendedAction, writer.tag(9999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ActionPing
 */
export const ActionPing = new ActionPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtendedActionPing$Type extends MessageType<ExtendedActionPing> {
    constructor() {
        super("Laana.ExtendedActionPing", [
            { no: 1, name: "actionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "actionData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ExtendedActionPing>): ExtendedActionPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionName = "";
        message.actionData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ExtendedActionPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtendedActionPing): ExtendedActionPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string actionName */ 1:
                    message.actionName = reader.string();
                    break;
                case /* bytes actionData */ 2:
                    message.actionData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtendedActionPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string actionName = 1; */
        if (message.actionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.actionName);
        /* bytes actionData = 2; */
        if (message.actionData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.actionData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ExtendedActionPing
 */
export const ExtendedActionPing = new ExtendedActionPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralSuccessPong$Type extends MessageType<GeneralSuccessPong> {
    constructor() {
        super("Laana.GeneralSuccessPong", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GeneralSuccessPong>): GeneralSuccessPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<GeneralSuccessPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralSuccessPong): GeneralSuccessPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralSuccessPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GeneralSuccessPong
 */
export const GeneralSuccessPong = new GeneralSuccessPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailedPong$Type extends MessageType<FailedPong> {
    constructor() {
        super("Laana.FailedPong", [
            { no: 1, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FailedPong>): FailedPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<FailedPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FailedPong): FailedPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reason */ 1:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FailedPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reason = 1; */
        if (message.reason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.FailedPong
 */
export const FailedPong = new FailedPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionPong$Type extends MessageType<ActionPong> {
    constructor() {
        super("Laana.ActionPong", [
            { no: 1, name: "clientPingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "failed", kind: "message", oneof: "pong", T: () => FailedPong },
            { no: 101, name: "sendMessage", kind: "message", oneof: "pong", T: () => SendMessagePong },
            { no: 102, name: "sendPackedMessages", kind: "message", oneof: "pong", T: () => SendPackedMessagesPong },
            { no: 103, name: "getMessage", kind: "message", oneof: "pong", T: () => GetMessagePong },
            { no: 104, name: "getMessages", kind: "message", oneof: "pong", T: () => GetMessagesPong },
            { no: 105, name: "getHistoryMessages", kind: "message", oneof: "pong", T: () => GetHistoryMessagesPong },
            { no: 106, name: "withdrawMessage", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 107, name: "markPeerMessageAsRead", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 108, name: "forwardMessage", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 201, name: "getAllBuddies", kind: "message", oneof: "pong", T: () => GetAllBuddiesPong },
            { no: 202, name: "getAllGroups", kind: "message", oneof: "pong", T: () => GetAllGroupsPong },
            { no: 203, name: "getRecentContactList", kind: "message", oneof: "pong", T: () => GetRecentContactListPong },
            { no: 204, name: "getBuddyInfo", kind: "message", oneof: "pong", T: () => GetBuddyInfoPong },
            { no: 205, name: "getGroupInfo", kind: "message", oneof: "pong", T: () => GetGroupInfoPong },
            { no: 301, name: "getGroupMemberUins", kind: "message", oneof: "pong", T: () => GetGroupMemberUinsPong },
            { no: 302, name: "getGroupMemberInfo", kind: "message", oneof: "pong", T: () => GetGroupMemberInfoPong },
            { no: 303, name: "getAllGroupMembersInfo", kind: "message", oneof: "pong", T: () => GetAllGroupMembersInfoPong },
            { no: 304, name: "setGroupName", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 305, name: "setGroupAvatar", kind: "message", oneof: "pong", T: () => SetGroupAvatarPong },
            { no: 306, name: "setGroupAdmin", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 307, name: "setGroupMemberCard", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 308, name: "setGroupMemberSpecialTitle", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 309, name: "setGroupMemberShutUp", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 310, name: "setGroupShutUpAll", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 311, name: "kickGroupMember", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 312, name: "quitGroup", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 313, name: "getPaginatedGroupEssenceMessage", kind: "message", oneof: "pong", T: () => GetPaginatedGroupEssenceMessagePong },
            { no: 314, name: "getAllGroupsEssenceMessage", kind: "message", oneof: "pong", T: () => GetAllGroupsEssenceMessagePong },
            { no: 315, name: "setGroupEssenceMessage", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 401, name: "handleBuddyAddRequest", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 402, name: "handleGroupJoinRequest", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 403, name: "handleGroupInvitation", kind: "message", oneof: "pong", T: () => HandleGroupInvitationPong },
            { no: 501, name: "uploadCache", kind: "message", oneof: "pong", T: () => UploadCachePong },
            { no: 502, name: "prepareCacheByUrl", kind: "message", oneof: "pong", T: () => PrepareCacheByUrlPong },
            { no: 503, name: "destroyCache", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 504, name: "getFileData", kind: "message", oneof: "pong", T: () => GetFileDataPong },
            { no: 505, name: "getGroupFileList", kind: "message", oneof: "pong", T: () => GetGroupFileListPong },
            { no: 506, name: "uploadGroupFile", kind: "message", oneof: "pong", T: () => UploadGroupFilePong },
            { no: 507, name: "createGroupFolder", kind: "message", oneof: "pong", T: () => CreateGroupFolderPong },
            { no: 508, name: "deleteGroupFile", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 509, name: "deleteGroupFolder", kind: "message", oneof: "pong", T: () => GeneralSuccessPong },
            { no: 9999, name: "extendedAction", kind: "message", oneof: "pong", T: () => ExtendedActionPong }
        ]);
    }
    create(value?: PartialMessage<ActionPong>): ActionPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientPingId = "";
        message.pong = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ActionPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionPong): ActionPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string clientPingId */ 1:
                    message.clientPingId = reader.string();
                    break;
                case /* Laana.FailedPong failed */ 11:
                    message.pong = {
                        oneofKind: "failed",
                        failed: FailedPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).failed)
                    };
                    break;
                case /* Laana.SendMessagePong sendMessage */ 101:
                    message.pong = {
                        oneofKind: "sendMessage",
                        sendMessage: SendMessagePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).sendMessage)
                    };
                    break;
                case /* Laana.SendPackedMessagesPong sendPackedMessages */ 102:
                    message.pong = {
                        oneofKind: "sendPackedMessages",
                        sendPackedMessages: SendPackedMessagesPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).sendPackedMessages)
                    };
                    break;
                case /* Laana.GetMessagePong getMessage */ 103:
                    message.pong = {
                        oneofKind: "getMessage",
                        getMessage: GetMessagePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getMessage)
                    };
                    break;
                case /* Laana.GetMessagesPong getMessages */ 104:
                    message.pong = {
                        oneofKind: "getMessages",
                        getMessages: GetMessagesPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getMessages)
                    };
                    break;
                case /* Laana.GetHistoryMessagesPong getHistoryMessages */ 105:
                    message.pong = {
                        oneofKind: "getHistoryMessages",
                        getHistoryMessages: GetHistoryMessagesPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getHistoryMessages)
                    };
                    break;
                case /* Laana.GeneralSuccessPong withdrawMessage */ 106:
                    message.pong = {
                        oneofKind: "withdrawMessage",
                        withdrawMessage: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).withdrawMessage)
                    };
                    break;
                case /* Laana.GeneralSuccessPong markPeerMessageAsRead */ 107:
                    message.pong = {
                        oneofKind: "markPeerMessageAsRead",
                        markPeerMessageAsRead: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).markPeerMessageAsRead)
                    };
                    break;
                case /* Laana.GeneralSuccessPong forwardMessage */ 108:
                    message.pong = {
                        oneofKind: "forwardMessage",
                        forwardMessage: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).forwardMessage)
                    };
                    break;
                case /* Laana.GetAllBuddiesPong getAllBuddies */ 201:
                    message.pong = {
                        oneofKind: "getAllBuddies",
                        getAllBuddies: GetAllBuddiesPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getAllBuddies)
                    };
                    break;
                case /* Laana.GetAllGroupsPong getAllGroups */ 202:
                    message.pong = {
                        oneofKind: "getAllGroups",
                        getAllGroups: GetAllGroupsPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getAllGroups)
                    };
                    break;
                case /* Laana.GetRecentContactListPong getRecentContactList */ 203:
                    message.pong = {
                        oneofKind: "getRecentContactList",
                        getRecentContactList: GetRecentContactListPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getRecentContactList)
                    };
                    break;
                case /* Laana.GetBuddyInfoPong getBuddyInfo */ 204:
                    message.pong = {
                        oneofKind: "getBuddyInfo",
                        getBuddyInfo: GetBuddyInfoPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getBuddyInfo)
                    };
                    break;
                case /* Laana.GetGroupInfoPong getGroupInfo */ 205:
                    message.pong = {
                        oneofKind: "getGroupInfo",
                        getGroupInfo: GetGroupInfoPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getGroupInfo)
                    };
                    break;
                case /* Laana.GetGroupMemberUinsPong getGroupMemberUins */ 301:
                    message.pong = {
                        oneofKind: "getGroupMemberUins",
                        getGroupMemberUins: GetGroupMemberUinsPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getGroupMemberUins)
                    };
                    break;
                case /* Laana.GetGroupMemberInfoPong getGroupMemberInfo */ 302:
                    message.pong = {
                        oneofKind: "getGroupMemberInfo",
                        getGroupMemberInfo: GetGroupMemberInfoPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getGroupMemberInfo)
                    };
                    break;
                case /* Laana.GetAllGroupMembersInfoPong getAllGroupMembersInfo */ 303:
                    message.pong = {
                        oneofKind: "getAllGroupMembersInfo",
                        getAllGroupMembersInfo: GetAllGroupMembersInfoPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getAllGroupMembersInfo)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupName */ 304:
                    message.pong = {
                        oneofKind: "setGroupName",
                        setGroupName: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupName)
                    };
                    break;
                case /* Laana.SetGroupAvatarPong setGroupAvatar */ 305:
                    message.pong = {
                        oneofKind: "setGroupAvatar",
                        setGroupAvatar: SetGroupAvatarPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupAvatar)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupAdmin */ 306:
                    message.pong = {
                        oneofKind: "setGroupAdmin",
                        setGroupAdmin: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupAdmin)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupMemberCard */ 307:
                    message.pong = {
                        oneofKind: "setGroupMemberCard",
                        setGroupMemberCard: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupMemberCard)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupMemberSpecialTitle */ 308:
                    message.pong = {
                        oneofKind: "setGroupMemberSpecialTitle",
                        setGroupMemberSpecialTitle: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupMemberSpecialTitle)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupMemberShutUp */ 309:
                    message.pong = {
                        oneofKind: "setGroupMemberShutUp",
                        setGroupMemberShutUp: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupMemberShutUp)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupShutUpAll */ 310:
                    message.pong = {
                        oneofKind: "setGroupShutUpAll",
                        setGroupShutUpAll: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupShutUpAll)
                    };
                    break;
                case /* Laana.GeneralSuccessPong kickGroupMember */ 311:
                    message.pong = {
                        oneofKind: "kickGroupMember",
                        kickGroupMember: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).kickGroupMember)
                    };
                    break;
                case /* Laana.GeneralSuccessPong quitGroup */ 312:
                    message.pong = {
                        oneofKind: "quitGroup",
                        quitGroup: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).quitGroup)
                    };
                    break;
                case /* Laana.GetPaginatedGroupEssenceMessagePong getPaginatedGroupEssenceMessage */ 313:
                    message.pong = {
                        oneofKind: "getPaginatedGroupEssenceMessage",
                        getPaginatedGroupEssenceMessage: GetPaginatedGroupEssenceMessagePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getPaginatedGroupEssenceMessage)
                    };
                    break;
                case /* Laana.GetAllGroupsEssenceMessagePong getAllGroupsEssenceMessage */ 314:
                    message.pong = {
                        oneofKind: "getAllGroupsEssenceMessage",
                        getAllGroupsEssenceMessage: GetAllGroupsEssenceMessagePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getAllGroupsEssenceMessage)
                    };
                    break;
                case /* Laana.GeneralSuccessPong setGroupEssenceMessage */ 315:
                    message.pong = {
                        oneofKind: "setGroupEssenceMessage",
                        setGroupEssenceMessage: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).setGroupEssenceMessage)
                    };
                    break;
                case /* Laana.GeneralSuccessPong handleBuddyAddRequest */ 401:
                    message.pong = {
                        oneofKind: "handleBuddyAddRequest",
                        handleBuddyAddRequest: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).handleBuddyAddRequest)
                    };
                    break;
                case /* Laana.GeneralSuccessPong handleGroupJoinRequest */ 402:
                    message.pong = {
                        oneofKind: "handleGroupJoinRequest",
                        handleGroupJoinRequest: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).handleGroupJoinRequest)
                    };
                    break;
                case /* Laana.HandleGroupInvitationPong handleGroupInvitation */ 403:
                    message.pong = {
                        oneofKind: "handleGroupInvitation",
                        handleGroupInvitation: HandleGroupInvitationPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).handleGroupInvitation)
                    };
                    break;
                case /* Laana.UploadCachePong uploadCache */ 501:
                    message.pong = {
                        oneofKind: "uploadCache",
                        uploadCache: UploadCachePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).uploadCache)
                    };
                    break;
                case /* Laana.PrepareCacheByUrlPong prepareCacheByUrl */ 502:
                    message.pong = {
                        oneofKind: "prepareCacheByUrl",
                        prepareCacheByUrl: PrepareCacheByUrlPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).prepareCacheByUrl)
                    };
                    break;
                case /* Laana.GeneralSuccessPong destroyCache */ 503:
                    message.pong = {
                        oneofKind: "destroyCache",
                        destroyCache: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).destroyCache)
                    };
                    break;
                case /* Laana.GetFileDataPong getFileData */ 504:
                    message.pong = {
                        oneofKind: "getFileData",
                        getFileData: GetFileDataPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getFileData)
                    };
                    break;
                case /* Laana.GetGroupFileListPong getGroupFileList */ 505:
                    message.pong = {
                        oneofKind: "getGroupFileList",
                        getGroupFileList: GetGroupFileListPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).getGroupFileList)
                    };
                    break;
                case /* Laana.UploadGroupFilePong uploadGroupFile */ 506:
                    message.pong = {
                        oneofKind: "uploadGroupFile",
                        uploadGroupFile: UploadGroupFilePong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).uploadGroupFile)
                    };
                    break;
                case /* Laana.CreateGroupFolderPong createGroupFolder */ 507:
                    message.pong = {
                        oneofKind: "createGroupFolder",
                        createGroupFolder: CreateGroupFolderPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).createGroupFolder)
                    };
                    break;
                case /* Laana.GeneralSuccessPong deleteGroupFile */ 508:
                    message.pong = {
                        oneofKind: "deleteGroupFile",
                        deleteGroupFile: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).deleteGroupFile)
                    };
                    break;
                case /* Laana.GeneralSuccessPong deleteGroupFolder */ 509:
                    message.pong = {
                        oneofKind: "deleteGroupFolder",
                        deleteGroupFolder: GeneralSuccessPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).deleteGroupFolder)
                    };
                    break;
                case /* Laana.ExtendedActionPong extendedAction */ 9999:
                    message.pong = {
                        oneofKind: "extendedAction",
                        extendedAction: ExtendedActionPong.internalBinaryRead(reader, reader.uint32(), options, (message.pong as any).extendedAction)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string clientPingId = 1; */
        if (message.clientPingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientPingId);
        /* Laana.FailedPong failed = 11; */
        if (message.pong.oneofKind === "failed")
            FailedPong.internalBinaryWrite(message.pong.failed, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SendMessagePong sendMessage = 101; */
        if (message.pong.oneofKind === "sendMessage")
            SendMessagePong.internalBinaryWrite(message.pong.sendMessage, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SendPackedMessagesPong sendPackedMessages = 102; */
        if (message.pong.oneofKind === "sendPackedMessages")
            SendPackedMessagesPong.internalBinaryWrite(message.pong.sendPackedMessages, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetMessagePong getMessage = 103; */
        if (message.pong.oneofKind === "getMessage")
            GetMessagePong.internalBinaryWrite(message.pong.getMessage, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetMessagesPong getMessages = 104; */
        if (message.pong.oneofKind === "getMessages")
            GetMessagesPong.internalBinaryWrite(message.pong.getMessages, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetHistoryMessagesPong getHistoryMessages = 105; */
        if (message.pong.oneofKind === "getHistoryMessages")
            GetHistoryMessagesPong.internalBinaryWrite(message.pong.getHistoryMessages, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong withdrawMessage = 106; */
        if (message.pong.oneofKind === "withdrawMessage")
            GeneralSuccessPong.internalBinaryWrite(message.pong.withdrawMessage, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong markPeerMessageAsRead = 107; */
        if (message.pong.oneofKind === "markPeerMessageAsRead")
            GeneralSuccessPong.internalBinaryWrite(message.pong.markPeerMessageAsRead, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong forwardMessage = 108; */
        if (message.pong.oneofKind === "forwardMessage")
            GeneralSuccessPong.internalBinaryWrite(message.pong.forwardMessage, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllBuddiesPong getAllBuddies = 201; */
        if (message.pong.oneofKind === "getAllBuddies")
            GetAllBuddiesPong.internalBinaryWrite(message.pong.getAllBuddies, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupsPong getAllGroups = 202; */
        if (message.pong.oneofKind === "getAllGroups")
            GetAllGroupsPong.internalBinaryWrite(message.pong.getAllGroups, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetRecentContactListPong getRecentContactList = 203; */
        if (message.pong.oneofKind === "getRecentContactList")
            GetRecentContactListPong.internalBinaryWrite(message.pong.getRecentContactList, writer.tag(203, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetBuddyInfoPong getBuddyInfo = 204; */
        if (message.pong.oneofKind === "getBuddyInfo")
            GetBuddyInfoPong.internalBinaryWrite(message.pong.getBuddyInfo, writer.tag(204, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupInfoPong getGroupInfo = 205; */
        if (message.pong.oneofKind === "getGroupInfo")
            GetGroupInfoPong.internalBinaryWrite(message.pong.getGroupInfo, writer.tag(205, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupMemberUinsPong getGroupMemberUins = 301; */
        if (message.pong.oneofKind === "getGroupMemberUins")
            GetGroupMemberUinsPong.internalBinaryWrite(message.pong.getGroupMemberUins, writer.tag(301, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupMemberInfoPong getGroupMemberInfo = 302; */
        if (message.pong.oneofKind === "getGroupMemberInfo")
            GetGroupMemberInfoPong.internalBinaryWrite(message.pong.getGroupMemberInfo, writer.tag(302, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupMembersInfoPong getAllGroupMembersInfo = 303; */
        if (message.pong.oneofKind === "getAllGroupMembersInfo")
            GetAllGroupMembersInfoPong.internalBinaryWrite(message.pong.getAllGroupMembersInfo, writer.tag(303, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupName = 304; */
        if (message.pong.oneofKind === "setGroupName")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupName, writer.tag(304, WireType.LengthDelimited).fork(), options).join();
        /* Laana.SetGroupAvatarPong setGroupAvatar = 305; */
        if (message.pong.oneofKind === "setGroupAvatar")
            SetGroupAvatarPong.internalBinaryWrite(message.pong.setGroupAvatar, writer.tag(305, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupAdmin = 306; */
        if (message.pong.oneofKind === "setGroupAdmin")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupAdmin, writer.tag(306, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupMemberCard = 307; */
        if (message.pong.oneofKind === "setGroupMemberCard")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupMemberCard, writer.tag(307, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupMemberSpecialTitle = 308; */
        if (message.pong.oneofKind === "setGroupMemberSpecialTitle")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupMemberSpecialTitle, writer.tag(308, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupMemberShutUp = 309; */
        if (message.pong.oneofKind === "setGroupMemberShutUp")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupMemberShutUp, writer.tag(309, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupShutUpAll = 310; */
        if (message.pong.oneofKind === "setGroupShutUpAll")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupShutUpAll, writer.tag(310, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong kickGroupMember = 311; */
        if (message.pong.oneofKind === "kickGroupMember")
            GeneralSuccessPong.internalBinaryWrite(message.pong.kickGroupMember, writer.tag(311, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong quitGroup = 312; */
        if (message.pong.oneofKind === "quitGroup")
            GeneralSuccessPong.internalBinaryWrite(message.pong.quitGroup, writer.tag(312, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetPaginatedGroupEssenceMessagePong getPaginatedGroupEssenceMessage = 313; */
        if (message.pong.oneofKind === "getPaginatedGroupEssenceMessage")
            GetPaginatedGroupEssenceMessagePong.internalBinaryWrite(message.pong.getPaginatedGroupEssenceMessage, writer.tag(313, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetAllGroupsEssenceMessagePong getAllGroupsEssenceMessage = 314; */
        if (message.pong.oneofKind === "getAllGroupsEssenceMessage")
            GetAllGroupsEssenceMessagePong.internalBinaryWrite(message.pong.getAllGroupsEssenceMessage, writer.tag(314, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong setGroupEssenceMessage = 315; */
        if (message.pong.oneofKind === "setGroupEssenceMessage")
            GeneralSuccessPong.internalBinaryWrite(message.pong.setGroupEssenceMessage, writer.tag(315, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong handleBuddyAddRequest = 401; */
        if (message.pong.oneofKind === "handleBuddyAddRequest")
            GeneralSuccessPong.internalBinaryWrite(message.pong.handleBuddyAddRequest, writer.tag(401, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong handleGroupJoinRequest = 402; */
        if (message.pong.oneofKind === "handleGroupJoinRequest")
            GeneralSuccessPong.internalBinaryWrite(message.pong.handleGroupJoinRequest, writer.tag(402, WireType.LengthDelimited).fork(), options).join();
        /* Laana.HandleGroupInvitationPong handleGroupInvitation = 403; */
        if (message.pong.oneofKind === "handleGroupInvitation")
            HandleGroupInvitationPong.internalBinaryWrite(message.pong.handleGroupInvitation, writer.tag(403, WireType.LengthDelimited).fork(), options).join();
        /* Laana.UploadCachePong uploadCache = 501; */
        if (message.pong.oneofKind === "uploadCache")
            UploadCachePong.internalBinaryWrite(message.pong.uploadCache, writer.tag(501, WireType.LengthDelimited).fork(), options).join();
        /* Laana.PrepareCacheByUrlPong prepareCacheByUrl = 502; */
        if (message.pong.oneofKind === "prepareCacheByUrl")
            PrepareCacheByUrlPong.internalBinaryWrite(message.pong.prepareCacheByUrl, writer.tag(502, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong destroyCache = 503; */
        if (message.pong.oneofKind === "destroyCache")
            GeneralSuccessPong.internalBinaryWrite(message.pong.destroyCache, writer.tag(503, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetFileDataPong getFileData = 504; */
        if (message.pong.oneofKind === "getFileData")
            GetFileDataPong.internalBinaryWrite(message.pong.getFileData, writer.tag(504, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GetGroupFileListPong getGroupFileList = 505; */
        if (message.pong.oneofKind === "getGroupFileList")
            GetGroupFileListPong.internalBinaryWrite(message.pong.getGroupFileList, writer.tag(505, WireType.LengthDelimited).fork(), options).join();
        /* Laana.UploadGroupFilePong uploadGroupFile = 506; */
        if (message.pong.oneofKind === "uploadGroupFile")
            UploadGroupFilePong.internalBinaryWrite(message.pong.uploadGroupFile, writer.tag(506, WireType.LengthDelimited).fork(), options).join();
        /* Laana.CreateGroupFolderPong createGroupFolder = 507; */
        if (message.pong.oneofKind === "createGroupFolder")
            CreateGroupFolderPong.internalBinaryWrite(message.pong.createGroupFolder, writer.tag(507, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong deleteGroupFile = 508; */
        if (message.pong.oneofKind === "deleteGroupFile")
            GeneralSuccessPong.internalBinaryWrite(message.pong.deleteGroupFile, writer.tag(508, WireType.LengthDelimited).fork(), options).join();
        /* Laana.GeneralSuccessPong deleteGroupFolder = 509; */
        if (message.pong.oneofKind === "deleteGroupFolder")
            GeneralSuccessPong.internalBinaryWrite(message.pong.deleteGroupFolder, writer.tag(509, WireType.LengthDelimited).fork(), options).join();
        /* Laana.ExtendedActionPong extendedAction = 9999; */
        if (message.pong.oneofKind === "extendedAction")
            ExtendedActionPong.internalBinaryWrite(message.pong.extendedAction, writer.tag(9999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ActionPong
 */
export const ActionPong = new ActionPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtendedActionPong$Type extends MessageType<ExtendedActionPong> {
    constructor() {
        super("Laana.ExtendedActionPong", [
            { no: 1, name: "actionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pongData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ExtendedActionPong>): ExtendedActionPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.actionName = "";
        message.pongData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ExtendedActionPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtendedActionPong): ExtendedActionPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string actionName */ 1:
                    message.actionName = reader.string();
                    break;
                case /* bytes pongData */ 2:
                    message.pongData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtendedActionPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string actionName = 1; */
        if (message.actionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.actionName);
        /* bytes pongData = 2; */
        if (message.pongData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pongData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.ExtendedActionPong
 */
export const ExtendedActionPong = new ExtendedActionPong$Type();
