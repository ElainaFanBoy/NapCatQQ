// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "action/file.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { File } from "../entity/file";
import { GroupFolder } from "../entity/file";
import { GroupFile } from "../entity/file";
/**
 * @generated from protobuf message Laana.UploadCachePing
 */
export interface UploadCachePing {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message Laana.UploadCachePong
 */
export interface UploadCachePong {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.PrepareCacheByUrlPing
 */
export interface PrepareCacheByUrlPing {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message Laana.PrepareCacheByUrlPong
 */
export interface PrepareCacheByUrlPong {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.DestroyCachePing
 */
export interface DestroyCachePing {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.GetFileDataPing
 */
export interface GetFileDataPing {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.GetFileDataPong
 */
export interface GetFileDataPong {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message Laana.GetGroupFileListPing
 */
export interface GetGroupFileListPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: optional string folderId = 2;
     */
    folderId?: string;
}
/**
 * @generated from protobuf message Laana.GetGroupFileListPong
 */
export interface GetGroupFileListPong {
    /**
     * @generated from protobuf field: repeated Laana.GroupFile files = 1;
     */
    files: GroupFile[];
    /**
     * @generated from protobuf field: repeated Laana.GroupFolder folders = 2;
     */
    folders: GroupFolder[];
}
/**
 * @generated from protobuf message Laana.UploadGroupFilePing
 */
export interface UploadGroupFilePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: Laana.File file = 2;
     */
    file?: File;
    /**
     * @generated from protobuf field: optional string folderId = 3;
     */
    folderId?: string;
}
/**
 * @generated from protobuf message Laana.UploadGroupFilePong
 */
export interface UploadGroupFilePong {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.CreateGroupFolderPing
 */
export interface CreateGroupFolderPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // optional string parentFolderId = 3;
    // QQ does not allow nested folders
}
/**
 * @generated from protobuf message Laana.CreateGroupFolderPong
 */
export interface CreateGroupFolderPong {
    /**
     * @generated from protobuf field: string folderId = 1;
     */
    folderId: string;
}
/**
 * @generated from protobuf message Laana.DeleteGroupFilePing
 */
export interface DeleteGroupFilePing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string cacheId = 2;
     */
    cacheId: string;
}
/**
 * @generated from protobuf message Laana.DeleteGroupFolderPing
 */
export interface DeleteGroupFolderPing {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string folderId = 2;
     */
    folderId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UploadCachePing$Type extends MessageType<UploadCachePing> {
    constructor() {
        super("Laana.UploadCachePing", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UploadCachePing>): UploadCachePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UploadCachePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadCachePing): UploadCachePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadCachePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.UploadCachePing
 */
export const UploadCachePing = new UploadCachePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadCachePong$Type extends MessageType<UploadCachePong> {
    constructor() {
        super("Laana.UploadCachePong", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadCachePong>): UploadCachePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<UploadCachePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadCachePong): UploadCachePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadCachePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.UploadCachePong
 */
export const UploadCachePong = new UploadCachePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrepareCacheByUrlPing$Type extends MessageType<PrepareCacheByUrlPing> {
    constructor() {
        super("Laana.PrepareCacheByUrlPing", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrepareCacheByUrlPing>): PrepareCacheByUrlPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<PrepareCacheByUrlPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrepareCacheByUrlPing): PrepareCacheByUrlPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrepareCacheByUrlPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.PrepareCacheByUrlPing
 */
export const PrepareCacheByUrlPing = new PrepareCacheByUrlPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrepareCacheByUrlPong$Type extends MessageType<PrepareCacheByUrlPong> {
    constructor() {
        super("Laana.PrepareCacheByUrlPong", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrepareCacheByUrlPong>): PrepareCacheByUrlPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<PrepareCacheByUrlPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrepareCacheByUrlPong): PrepareCacheByUrlPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrepareCacheByUrlPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.PrepareCacheByUrlPong
 */
export const PrepareCacheByUrlPong = new PrepareCacheByUrlPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DestroyCachePing$Type extends MessageType<DestroyCachePing> {
    constructor() {
        super("Laana.DestroyCachePing", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DestroyCachePing>): DestroyCachePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<DestroyCachePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestroyCachePing): DestroyCachePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DestroyCachePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.DestroyCachePing
 */
export const DestroyCachePing = new DestroyCachePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFileDataPing$Type extends MessageType<GetFileDataPing> {
    constructor() {
        super("Laana.GetFileDataPing", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFileDataPing>): GetFileDataPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<GetFileDataPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFileDataPing): GetFileDataPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFileDataPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetFileDataPing
 */
export const GetFileDataPing = new GetFileDataPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFileDataPong$Type extends MessageType<GetFileDataPong> {
    constructor() {
        super("Laana.GetFileDataPong", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetFileDataPong>): GetFileDataPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetFileDataPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFileDataPong): GetFileDataPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFileDataPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetFileDataPong
 */
export const GetFileDataPong = new GetFileDataPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupFileListPing$Type extends MessageType<GetGroupFileListPing> {
    constructor() {
        super("Laana.GetGroupFileListPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "folderId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupFileListPing>): GetGroupFileListPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<GetGroupFileListPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupFileListPing): GetGroupFileListPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* optional string folderId */ 2:
                    message.folderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupFileListPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* optional string folderId = 2; */
        if (message.folderId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.folderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupFileListPing
 */
export const GetGroupFileListPing = new GetGroupFileListPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupFileListPong$Type extends MessageType<GetGroupFileListPong> {
    constructor() {
        super("Laana.GetGroupFileListPong", [
            { no: 1, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupFile },
            { no: 2, name: "folders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupFolder }
        ]);
    }
    create(value?: PartialMessage<GetGroupFileListPong>): GetGroupFileListPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.files = [];
        message.folders = [];
        if (value !== undefined)
            reflectionMergePartial<GetGroupFileListPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupFileListPong): GetGroupFileListPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Laana.GroupFile files */ 1:
                    message.files.push(GroupFile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Laana.GroupFolder folders */ 2:
                    message.folders.push(GroupFolder.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupFileListPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Laana.GroupFile files = 1; */
        for (let i = 0; i < message.files.length; i++)
            GroupFile.internalBinaryWrite(message.files[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Laana.GroupFolder folders = 2; */
        for (let i = 0; i < message.folders.length; i++)
            GroupFolder.internalBinaryWrite(message.folders[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GetGroupFileListPong
 */
export const GetGroupFileListPong = new GetGroupFileListPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadGroupFilePing$Type extends MessageType<UploadGroupFilePing> {
    constructor() {
        super("Laana.UploadGroupFilePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file", kind: "message", T: () => File },
            { no: 3, name: "folderId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadGroupFilePing>): UploadGroupFilePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        if (value !== undefined)
            reflectionMergePartial<UploadGroupFilePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadGroupFilePing): UploadGroupFilePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* Laana.File file */ 2:
                    message.file = File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                case /* optional string folderId */ 3:
                    message.folderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadGroupFilePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* Laana.File file = 2; */
        if (message.file)
            File.internalBinaryWrite(message.file, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string folderId = 3; */
        if (message.folderId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.folderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.UploadGroupFilePing
 */
export const UploadGroupFilePing = new UploadGroupFilePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadGroupFilePong$Type extends MessageType<UploadGroupFilePong> {
    constructor() {
        super("Laana.UploadGroupFilePong", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadGroupFilePong>): UploadGroupFilePong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<UploadGroupFilePong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadGroupFilePong): UploadGroupFilePong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadGroupFilePong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.UploadGroupFilePong
 */
export const UploadGroupFilePong = new UploadGroupFilePong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupFolderPing$Type extends MessageType<CreateGroupFolderPing> {
    constructor() {
        super("Laana.CreateGroupFolderPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupFolderPing>): CreateGroupFolderPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGroupFolderPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupFolderPing): CreateGroupFolderPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupFolderPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.CreateGroupFolderPing
 */
export const CreateGroupFolderPing = new CreateGroupFolderPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupFolderPong$Type extends MessageType<CreateGroupFolderPong> {
    constructor() {
        super("Laana.CreateGroupFolderPong", [
            { no: 1, name: "folderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupFolderPong>): CreateGroupFolderPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.folderId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGroupFolderPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupFolderPong): CreateGroupFolderPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string folderId */ 1:
                    message.folderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupFolderPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string folderId = 1; */
        if (message.folderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.folderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.CreateGroupFolderPong
 */
export const CreateGroupFolderPong = new CreateGroupFolderPong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupFilePing$Type extends MessageType<DeleteGroupFilePing> {
    constructor() {
        super("Laana.DeleteGroupFilePing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupFilePing>): DeleteGroupFilePing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.cacheId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupFilePing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupFilePing): DeleteGroupFilePing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string cacheId */ 2:
                    message.cacheId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupFilePing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string cacheId = 2; */
        if (message.cacheId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cacheId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.DeleteGroupFilePing
 */
export const DeleteGroupFilePing = new DeleteGroupFilePing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupFolderPing$Type extends MessageType<DeleteGroupFolderPing> {
    constructor() {
        super("Laana.DeleteGroupFolderPing", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "folderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupFolderPing>): DeleteGroupFolderPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.folderId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupFolderPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupFolderPing): DeleteGroupFolderPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string folderId */ 2:
                    message.folderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupFolderPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string folderId = 2; */
        if (message.folderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.folderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.DeleteGroupFolderPing
 */
export const DeleteGroupFolderPing = new DeleteGroupFolderPing$Type();
