// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "entity/file.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.File
 */
export interface File {
    /**
     * @generated from protobuf oneof: uri
     */
    uri: {
        oneofKind: "url";
        /**
         * @generated from protobuf field: string url = 1;
         */
        url: string;
    } | {
        oneofKind: "cacheId";
        /**
         * @generated from protobuf field: string cacheId = 2;
         */
        cacheId: string;
    } | {
        oneofKind: "raw";
        /**
         * @generated from protobuf field: bytes raw = 3;
         */
        raw: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Laana.GroupFile
 */
export interface GroupFile {
    /**
     * @generated from protobuf field: string cacheId = 1;
     */
    cacheId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: uint64 size = 3;
     */
    size: bigint;
    /**
     * @generated from protobuf field: uint32 businessId = 4;
     */
    businessId: number;
    /**
     * @generated from protobuf field: string uploaderUin = 5;
     */
    uploaderUin: string;
    /**
     * @generated from protobuf field: uint32 uploadTime = 6;
     */
    uploadTime: number;
    /**
     * @generated from protobuf field: uint32 modifyTime = 7;
     */
    modifyTime: number;
    /**
     * @generated from protobuf field: uint32 downloadCount = 8;
     */
    downloadCount: number;
    /**
     * @generated from protobuf field: optional uint32 lastModifyTime = 9;
     */
    lastModifyTime?: number;
    /**
     * @generated from protobuf field: optional uint32 expireTime = 10;
     */
    expireTime?: number;
}
/**
 * @generated from protobuf message Laana.GroupFolder
 */
export interface GroupFolder {
    /**
     * @generated from protobuf field: string folderId = 1;
     */
    folderId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string creatorUin = 5;
     */
    creatorUin: string;
    /**
     * @generated from protobuf field: uint32 createTime = 6;
     */
    createTime: number;
    /**
     * @generated from protobuf field: uint32 fileCount = 11;
     */
    fileCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("Laana.File", [
            { no: 1, name: "url", kind: "scalar", oneof: "uri", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cacheId", kind: "scalar", oneof: "uri", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "raw", kind: "scalar", oneof: "uri", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uri = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.uri = {
                        oneofKind: "url",
                        url: reader.string()
                    };
                    break;
                case /* string cacheId */ 2:
                    message.uri = {
                        oneofKind: "cacheId",
                        cacheId: reader.string()
                    };
                    break;
                case /* bytes raw */ 3:
                    message.uri = {
                        oneofKind: "raw",
                        raw: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.uri.oneofKind === "url")
            writer.tag(1, WireType.LengthDelimited).string(message.uri.url);
        /* string cacheId = 2; */
        if (message.uri.oneofKind === "cacheId")
            writer.tag(2, WireType.LengthDelimited).string(message.uri.cacheId);
        /* bytes raw = 3; */
        if (message.uri.oneofKind === "raw")
            writer.tag(3, WireType.LengthDelimited).bytes(message.uri.raw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupFile$Type extends MessageType<GroupFile> {
    constructor() {
        super("Laana.GroupFile", [
            { no: 1, name: "cacheId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "businessId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "uploaderUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uploadTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "modifyTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "downloadCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "lastModifyTime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "expireTime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupFile>): GroupFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cacheId = "";
        message.name = "";
        message.size = 0n;
        message.businessId = 0;
        message.uploaderUin = "";
        message.uploadTime = 0;
        message.modifyTime = 0;
        message.downloadCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GroupFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupFile): GroupFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cacheId */ 1:
                    message.cacheId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint32 businessId */ 4:
                    message.businessId = reader.uint32();
                    break;
                case /* string uploaderUin */ 5:
                    message.uploaderUin = reader.string();
                    break;
                case /* uint32 uploadTime */ 6:
                    message.uploadTime = reader.uint32();
                    break;
                case /* uint32 modifyTime */ 7:
                    message.modifyTime = reader.uint32();
                    break;
                case /* uint32 downloadCount */ 8:
                    message.downloadCount = reader.uint32();
                    break;
                case /* optional uint32 lastModifyTime */ 9:
                    message.lastModifyTime = reader.uint32();
                    break;
                case /* optional uint32 expireTime */ 10:
                    message.expireTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cacheId = 1; */
        if (message.cacheId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cacheId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* uint32 businessId = 4; */
        if (message.businessId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.businessId);
        /* string uploaderUin = 5; */
        if (message.uploaderUin !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uploaderUin);
        /* uint32 uploadTime = 6; */
        if (message.uploadTime !== 0)
            writer.tag(6, WireType.Varint).uint32(message.uploadTime);
        /* uint32 modifyTime = 7; */
        if (message.modifyTime !== 0)
            writer.tag(7, WireType.Varint).uint32(message.modifyTime);
        /* uint32 downloadCount = 8; */
        if (message.downloadCount !== 0)
            writer.tag(8, WireType.Varint).uint32(message.downloadCount);
        /* optional uint32 lastModifyTime = 9; */
        if (message.lastModifyTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.lastModifyTime);
        /* optional uint32 expireTime = 10; */
        if (message.expireTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.expireTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupFile
 */
export const GroupFile = new GroupFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupFolder$Type extends MessageType<GroupFolder> {
    constructor() {
        super("Laana.GroupFolder", [
            { no: 1, name: "folderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "creatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "createTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fileCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupFolder>): GroupFolder {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.folderId = "";
        message.name = "";
        message.creatorUin = "";
        message.createTime = 0;
        message.fileCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GroupFolder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupFolder): GroupFolder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string folderId */ 1:
                    message.folderId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string creatorUin */ 5:
                    message.creatorUin = reader.string();
                    break;
                case /* uint32 createTime */ 6:
                    message.createTime = reader.uint32();
                    break;
                case /* uint32 fileCount */ 11:
                    message.fileCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupFolder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string folderId = 1; */
        if (message.folderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.folderId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string creatorUin = 5; */
        if (message.creatorUin !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.creatorUin);
        /* uint32 createTime = 6; */
        if (message.createTime !== 0)
            writer.tag(6, WireType.Varint).uint32(message.createTime);
        /* uint32 fileCount = 11; */
        if (message.fileCount !== 0)
            writer.tag(11, WireType.Varint).uint32(message.fileCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupFolder
 */
export const GroupFolder = new GroupFolder$Type();
