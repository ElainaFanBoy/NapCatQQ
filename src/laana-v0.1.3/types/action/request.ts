// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "action/request.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SelfInvitedToGroupEvent_State } from "../event/request";
/**
 * @generated from protobuf message Laana.HandleBuddyAddRequestPing
 */
export interface HandleBuddyAddRequestPing {
    /**
     * @generated from protobuf field: string buddyRequestId = 1;
     */
    buddyRequestId: string;
    /**
     * @generated from protobuf field: Laana.HandleBuddyAddRequestPing.Operation operation = 2;
     */
    operation: HandleBuddyAddRequestPing_Operation;
    /**
     * @generated from protobuf field: optional string rejectionWords = 11;
     */
    rejectionWords?: string;
}
/**
 * @generated from protobuf enum Laana.HandleBuddyAddRequestPing.Operation
 */
export enum HandleBuddyAddRequestPing_Operation {
    /**
     * @generated from protobuf enum value: ACCEPT = 0;
     */
    ACCEPT = 0,
    /**
     * @generated from protobuf enum value: REJECT = 1;
     */
    REJECT = 1,
    /**
     * @generated from protobuf enum value: IGNORE = 2;
     */
    IGNORE = 2
}
/**
 * @generated from protobuf message Laana.HandleGroupJoinRequestPing
 */
export interface HandleGroupJoinRequestPing {
    /**
     * @generated from protobuf field: string joinRequestId = 1;
     */
    joinRequestId: string;
    /**
     * @generated from protobuf field: Laana.HandleGroupJoinRequestPing.Operation operation = 2;
     */
    operation: HandleGroupJoinRequestPing_Operation;
    /**
     * @generated from protobuf field: optional string rejectionWords = 11;
     */
    rejectionWords?: string;
}
/**
 * @generated from protobuf enum Laana.HandleGroupJoinRequestPing.Operation
 */
export enum HandleGroupJoinRequestPing_Operation {
    /**
     * @generated from protobuf enum value: ACCEPT = 0;
     */
    ACCEPT = 0,
    /**
     * @generated from protobuf enum value: REJECT = 1;
     */
    REJECT = 1,
    /**
     * @generated from protobuf enum value: IGNORE = 2;
     */
    IGNORE = 2
}
/**
 * @generated from protobuf message Laana.HandleGroupInvitationPing
 */
export interface HandleGroupInvitationPing {
    /**
     * @generated from protobuf field: string invitationId = 1;
     */
    invitationId: string;
    /**
     * @generated from protobuf field: Laana.HandleGroupInvitationPing.Operation operation = 2;
     */
    operation: HandleGroupInvitationPing_Operation;
}
/**
 * @generated from protobuf enum Laana.HandleGroupInvitationPing.Operation
 */
export enum HandleGroupInvitationPing_Operation {
    /**
     * @generated from protobuf enum value: ACCEPT = 0;
     */
    ACCEPT = 0,
    /**
     * @generated from protobuf enum value: REJECT = 1;
     */
    REJECT = 1,
    /**
     * @generated from protobuf enum value: IGNORE = 2;
     */
    IGNORE = 2
}
/**
 * @generated from protobuf message Laana.HandleGroupInvitationPong
 */
export interface HandleGroupInvitationPong {
    /**
     * @generated from protobuf field: Laana.SelfInvitedToGroupEvent.State nextState = 1;
     */
    nextState: SelfInvitedToGroupEvent_State;
}
// @generated message type with reflection information, may provide speed optimized methods
class HandleBuddyAddRequestPing$Type extends MessageType<HandleBuddyAddRequestPing> {
    constructor() {
        super("Laana.HandleBuddyAddRequestPing", [
            { no: 1, name: "buddyRequestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation", kind: "enum", T: () => ["Laana.HandleBuddyAddRequestPing.Operation", HandleBuddyAddRequestPing_Operation] },
            { no: 11, name: "rejectionWords", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HandleBuddyAddRequestPing>): HandleBuddyAddRequestPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.buddyRequestId = "";
        message.operation = 0;
        if (value !== undefined)
            reflectionMergePartial<HandleBuddyAddRequestPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HandleBuddyAddRequestPing): HandleBuddyAddRequestPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string buddyRequestId */ 1:
                    message.buddyRequestId = reader.string();
                    break;
                case /* Laana.HandleBuddyAddRequestPing.Operation operation */ 2:
                    message.operation = reader.int32();
                    break;
                case /* optional string rejectionWords */ 11:
                    message.rejectionWords = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HandleBuddyAddRequestPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string buddyRequestId = 1; */
        if (message.buddyRequestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buddyRequestId);
        /* Laana.HandleBuddyAddRequestPing.Operation operation = 2; */
        if (message.operation !== 0)
            writer.tag(2, WireType.Varint).int32(message.operation);
        /* optional string rejectionWords = 11; */
        if (message.rejectionWords !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.rejectionWords);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.HandleBuddyAddRequestPing
 */
export const HandleBuddyAddRequestPing = new HandleBuddyAddRequestPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HandleGroupJoinRequestPing$Type extends MessageType<HandleGroupJoinRequestPing> {
    constructor() {
        super("Laana.HandleGroupJoinRequestPing", [
            { no: 1, name: "joinRequestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation", kind: "enum", T: () => ["Laana.HandleGroupJoinRequestPing.Operation", HandleGroupJoinRequestPing_Operation] },
            { no: 11, name: "rejectionWords", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HandleGroupJoinRequestPing>): HandleGroupJoinRequestPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.joinRequestId = "";
        message.operation = 0;
        if (value !== undefined)
            reflectionMergePartial<HandleGroupJoinRequestPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HandleGroupJoinRequestPing): HandleGroupJoinRequestPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string joinRequestId */ 1:
                    message.joinRequestId = reader.string();
                    break;
                case /* Laana.HandleGroupJoinRequestPing.Operation operation */ 2:
                    message.operation = reader.int32();
                    break;
                case /* optional string rejectionWords */ 11:
                    message.rejectionWords = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HandleGroupJoinRequestPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string joinRequestId = 1; */
        if (message.joinRequestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.joinRequestId);
        /* Laana.HandleGroupJoinRequestPing.Operation operation = 2; */
        if (message.operation !== 0)
            writer.tag(2, WireType.Varint).int32(message.operation);
        /* optional string rejectionWords = 11; */
        if (message.rejectionWords !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.rejectionWords);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.HandleGroupJoinRequestPing
 */
export const HandleGroupJoinRequestPing = new HandleGroupJoinRequestPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HandleGroupInvitationPing$Type extends MessageType<HandleGroupInvitationPing> {
    constructor() {
        super("Laana.HandleGroupInvitationPing", [
            { no: 1, name: "invitationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation", kind: "enum", T: () => ["Laana.HandleGroupInvitationPing.Operation", HandleGroupInvitationPing_Operation] }
        ]);
    }
    create(value?: PartialMessage<HandleGroupInvitationPing>): HandleGroupInvitationPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = "";
        message.operation = 0;
        if (value !== undefined)
            reflectionMergePartial<HandleGroupInvitationPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HandleGroupInvitationPing): HandleGroupInvitationPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invitationId */ 1:
                    message.invitationId = reader.string();
                    break;
                case /* Laana.HandleGroupInvitationPing.Operation operation */ 2:
                    message.operation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HandleGroupInvitationPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invitationId = 1; */
        if (message.invitationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invitationId);
        /* Laana.HandleGroupInvitationPing.Operation operation = 2; */
        if (message.operation !== 0)
            writer.tag(2, WireType.Varint).int32(message.operation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.HandleGroupInvitationPing
 */
export const HandleGroupInvitationPing = new HandleGroupInvitationPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HandleGroupInvitationPong$Type extends MessageType<HandleGroupInvitationPong> {
    constructor() {
        super("Laana.HandleGroupInvitationPong", [
            { no: 1, name: "nextState", kind: "enum", T: () => ["Laana.SelfInvitedToGroupEvent.State", SelfInvitedToGroupEvent_State] }
        ]);
    }
    create(value?: PartialMessage<HandleGroupInvitationPong>): HandleGroupInvitationPong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nextState = 0;
        if (value !== undefined)
            reflectionMergePartial<HandleGroupInvitationPong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HandleGroupInvitationPong): HandleGroupInvitationPong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Laana.SelfInvitedToGroupEvent.State nextState */ 1:
                    message.nextState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HandleGroupInvitationPong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Laana.SelfInvitedToGroupEvent.State nextState = 1; */
        if (message.nextState !== 0)
            writer.tag(1, WireType.Varint).int32(message.nextState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.HandleGroupInvitationPong
 */
export const HandleGroupInvitationPong = new HandleGroupInvitationPong$Type();
