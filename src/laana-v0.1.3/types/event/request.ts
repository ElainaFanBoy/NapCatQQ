// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "event/request.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.SomeoneRequestToAddBuddyEvent
 */
export interface SomeoneRequestToAddBuddyEvent {
    /**
     * @generated from protobuf field: string buddyRequestId = 1;
     */
    buddyRequestId: string;
    /**
     * @generated from protobuf field: string requesterUin = 2;
     */
    requesterUin: string;
    /**
     * @generated from protobuf field: optional string words = 11;
     */
    words?: string;
}
/**
 * @generated from protobuf message Laana.SomeoneRequestToJoinGroupEvent
 */
export interface SomeoneRequestToJoinGroupEvent {
    /**
     * @generated from protobuf field: string joinRequestId = 1;
     */
    joinRequestId: string;
    /**
     * @generated from protobuf field: string groupCode = 2;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string requesterUin = 3;
     */
    requesterUin: string;
    /**
     * @generated from protobuf field: optional string invitorUin = 4;
     */
    invitorUin?: string;
    /**
     * @generated from protobuf field: optional string words = 11;
     */
    words?: string;
}
/**
 * @generated from protobuf message Laana.SelfInvitedToGroupEvent
 */
export interface SelfInvitedToGroupEvent {
    /**
     * @generated from protobuf field: string invitationId = 1;
     */
    invitationId: string;
    /**
     * @generated from protobuf field: string groupCode = 2;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string invitorUin = 3;
     */
    invitorUin: string;
    /**
     * @generated from protobuf field: optional string words = 11;
     */
    words?: string;
}
/**
 * @generated from protobuf enum Laana.SelfInvitedToGroupEvent.State
 */
export enum SelfInvitedToGroupEvent_State {
    /**
     * May need the invitee (the bot itself) to accept the invitation
     *
     * @generated from protobuf enum value: PENDING_AT_INVITEE = 0;
     */
    PENDING_AT_INVITEE = 0,
    /**
     * May be accepted by the invitee, but need an admin to approve the invitation
     *
     * @generated from protobuf enum value: PENDING_AT_ADMIN = 1;
     */
    PENDING_AT_ADMIN = 1,
    /**
     * May succeed
     *
     * @generated from protobuf enum value: SUCCEEDED = 2;
     */
    SUCCEEDED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class SomeoneRequestToAddBuddyEvent$Type extends MessageType<SomeoneRequestToAddBuddyEvent> {
    constructor() {
        super("Laana.SomeoneRequestToAddBuddyEvent", [
            { no: 1, name: "buddyRequestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "requesterUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "words", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SomeoneRequestToAddBuddyEvent>): SomeoneRequestToAddBuddyEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.buddyRequestId = "";
        message.requesterUin = "";
        if (value !== undefined)
            reflectionMergePartial<SomeoneRequestToAddBuddyEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SomeoneRequestToAddBuddyEvent): SomeoneRequestToAddBuddyEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string buddyRequestId */ 1:
                    message.buddyRequestId = reader.string();
                    break;
                case /* string requesterUin */ 2:
                    message.requesterUin = reader.string();
                    break;
                case /* optional string words */ 11:
                    message.words = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SomeoneRequestToAddBuddyEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string buddyRequestId = 1; */
        if (message.buddyRequestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buddyRequestId);
        /* string requesterUin = 2; */
        if (message.requesterUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.requesterUin);
        /* optional string words = 11; */
        if (message.words !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.words);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SomeoneRequestToAddBuddyEvent
 */
export const SomeoneRequestToAddBuddyEvent = new SomeoneRequestToAddBuddyEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SomeoneRequestToJoinGroupEvent$Type extends MessageType<SomeoneRequestToJoinGroupEvent> {
    constructor() {
        super("Laana.SomeoneRequestToJoinGroupEvent", [
            { no: 1, name: "joinRequestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "requesterUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "invitorUin", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "words", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SomeoneRequestToJoinGroupEvent>): SomeoneRequestToJoinGroupEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.joinRequestId = "";
        message.groupCode = "";
        message.requesterUin = "";
        if (value !== undefined)
            reflectionMergePartial<SomeoneRequestToJoinGroupEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SomeoneRequestToJoinGroupEvent): SomeoneRequestToJoinGroupEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string joinRequestId */ 1:
                    message.joinRequestId = reader.string();
                    break;
                case /* string groupCode */ 2:
                    message.groupCode = reader.string();
                    break;
                case /* string requesterUin */ 3:
                    message.requesterUin = reader.string();
                    break;
                case /* optional string invitorUin */ 4:
                    message.invitorUin = reader.string();
                    break;
                case /* optional string words */ 11:
                    message.words = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SomeoneRequestToJoinGroupEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string joinRequestId = 1; */
        if (message.joinRequestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.joinRequestId);
        /* string groupCode = 2; */
        if (message.groupCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupCode);
        /* string requesterUin = 3; */
        if (message.requesterUin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.requesterUin);
        /* optional string invitorUin = 4; */
        if (message.invitorUin !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.invitorUin);
        /* optional string words = 11; */
        if (message.words !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.words);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SomeoneRequestToJoinGroupEvent
 */
export const SomeoneRequestToJoinGroupEvent = new SomeoneRequestToJoinGroupEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelfInvitedToGroupEvent$Type extends MessageType<SelfInvitedToGroupEvent> {
    constructor() {
        super("Laana.SelfInvitedToGroupEvent", [
            { no: 1, name: "invitationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "invitorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "words", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SelfInvitedToGroupEvent>): SelfInvitedToGroupEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = "";
        message.groupCode = "";
        message.invitorUin = "";
        if (value !== undefined)
            reflectionMergePartial<SelfInvitedToGroupEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelfInvitedToGroupEvent): SelfInvitedToGroupEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invitationId */ 1:
                    message.invitationId = reader.string();
                    break;
                case /* string groupCode */ 2:
                    message.groupCode = reader.string();
                    break;
                case /* string invitorUin */ 3:
                    message.invitorUin = reader.string();
                    break;
                case /* optional string words */ 11:
                    message.words = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelfInvitedToGroupEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invitationId = 1; */
        if (message.invitationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invitationId);
        /* string groupCode = 2; */
        if (message.groupCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupCode);
        /* string invitorUin = 3; */
        if (message.invitorUin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.invitorUin);
        /* optional string words = 11; */
        if (message.words !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.words);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.SelfInvitedToGroupEvent
 */
export const SelfInvitedToGroupEvent = new SelfInvitedToGroupEvent$Type();
