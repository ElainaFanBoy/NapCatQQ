// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "event/group.proto" (package "Laana", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Laana.GroupAdminChangeEvent
 */
export interface GroupAdminChangeEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string targetUin = 2;
     */
    targetUin: string;
    /**
     * @generated from protobuf field: Laana.GroupAdminChangeEvent.Operation operation = 3;
     */
    operation: GroupAdminChangeEvent_Operation;
}
/**
 * @generated from protobuf enum Laana.GroupAdminChangeEvent.Operation
 */
export enum GroupAdminChangeEvent_Operation {
    /**
     * @generated from protobuf enum value: SET = 0;
     */
    SET = 0,
    /**
     * @generated from protobuf enum value: UNSET = 1;
     */
    UNSET = 1
}
/**
 * @generated from protobuf message Laana.GroupEssenceMessageEvent
 */
export interface GroupEssenceMessageEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
    /**
     * @generated from protobuf field: Laana.GroupEssenceMessageEvent.Operation operation = 3;
     */
    operation: GroupEssenceMessageEvent_Operation;
    /**
     * @generated from protobuf field: string operatorUin = 4;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf enum Laana.GroupEssenceMessageEvent.Operation
 */
export enum GroupEssenceMessageEvent_Operation {
    /**
     * @generated from protobuf enum value: SET = 0;
     */
    SET = 0,
    /**
     * @generated from protobuf enum value: UNSET = 1;
     */
    UNSET = 1
}
/**
 * @generated from protobuf message Laana.GroupMemberCardChangeEvent
 */
export interface GroupMemberCardChangeEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string targetUin = 2;
     */
    targetUin: string;
    /**
     * @generated from protobuf field: string newCard = 3;
     */
    newCard: string;
    /**
     * @generated from protobuf field: string oldCard = 4;
     */
    oldCard: string;
    /**
     * @generated from protobuf field: optional string operatorUin = 5;
     */
    operatorUin?: string;
}
/**
 * @generated from protobuf message Laana.GroupMemberIncreaseEvent
 */
export interface GroupMemberIncreaseEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string newMemberUin = 2;
     */
    newMemberUin: string;
    /**
     * @generated from protobuf field: optional string operatorUin = 3;
     */
    operatorUin?: string;
    /**
     * @generated from protobuf field: optional string invitorUin = 4;
     */
    invitorUin?: string;
}
/**
 * @generated from protobuf message Laana.GroupMemberDecreaseEvent
 */
export interface GroupMemberDecreaseEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string oldMemberUin = 2;
     */
    oldMemberUin: string;
    /**
     * @generated from protobuf field: optional string operatorUin = 3;
     */
    operatorUin?: string;
}
/**
 * @generated from protobuf message Laana.GroupMemberTitleChangeEvent
 */
export interface GroupMemberTitleChangeEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string targetUin = 2;
     */
    targetUin: string;
    /**
     * @generated from protobuf field: string newTitle = 3;
     */
    newTitle: string;
    /**
     * @generated from protobuf field: optional string oldTitle = 4;
     */
    oldTitle?: string;
    /**
     * @generated from protobuf field: string operatorUin = 5;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupMessageWithdrawEvent
 */
export interface GroupMessageWithdrawEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string operatorUin = 3;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupShutUpMemberEvent
 */
export interface GroupShutUpMemberEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string targetUin = 2;
     */
    targetUin: string;
    /**
     * @generated from protobuf field: uint32 duration = 3;
     */
    duration: number;
    /**
     * @generated from protobuf field: string operatorUin = 4;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupShutUpAllEvent
 */
export interface GroupShutUpAllEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string operatorUin = 2;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupLiftShutUpMemberEvent
 */
export interface GroupLiftShutUpMemberEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string targetUin = 2;
     */
    targetUin: string;
    /**
     * @generated from protobuf field: string operatorUin = 3;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupLiftShutUpAllEvent
 */
export interface GroupLiftShutUpAllEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string operatorUin = 2;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf message Laana.GroupEmojiLikeEvent
 */
export interface GroupEmojiLikeEvent {
    /**
     * @generated from protobuf field: string groupCode = 1;
     */
    groupCode: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string emojiId = 3;
     */
    emojiId: string;
    /**
     * @generated from protobuf field: Laana.GroupEmojiLikeEvent.Operation operation = 4;
     */
    operation: GroupEmojiLikeEvent_Operation;
    /**
     * @generated from protobuf field: string operatorUin = 5;
     */
    operatorUin: string;
}
/**
 * @generated from protobuf enum Laana.GroupEmojiLikeEvent.Operation
 */
export enum GroupEmojiLikeEvent_Operation {
    /**
     * @generated from protobuf enum value: LIKE = 0;
     */
    LIKE = 0,
    /**
     * @generated from protobuf enum value: DISLIKE = 1;
     */
    DISLIKE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GroupAdminChangeEvent$Type extends MessageType<GroupAdminChangeEvent> {
    constructor() {
        super("Laana.GroupAdminChangeEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "targetUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operation", kind: "enum", T: () => ["Laana.GroupAdminChangeEvent.Operation", GroupAdminChangeEvent_Operation] }
        ]);
    }
    create(value?: PartialMessage<GroupAdminChangeEvent>): GroupAdminChangeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.targetUin = "";
        message.operation = 0;
        if (value !== undefined)
            reflectionMergePartial<GroupAdminChangeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupAdminChangeEvent): GroupAdminChangeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string targetUin */ 2:
                    message.targetUin = reader.string();
                    break;
                case /* Laana.GroupAdminChangeEvent.Operation operation */ 3:
                    message.operation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupAdminChangeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string targetUin = 2; */
        if (message.targetUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetUin);
        /* Laana.GroupAdminChangeEvent.Operation operation = 3; */
        if (message.operation !== 0)
            writer.tag(3, WireType.Varint).int32(message.operation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupAdminChangeEvent
 */
export const GroupAdminChangeEvent = new GroupAdminChangeEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupEssenceMessageEvent$Type extends MessageType<GroupEssenceMessageEvent> {
    constructor() {
        super("Laana.GroupEssenceMessageEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operation", kind: "enum", T: () => ["Laana.GroupEssenceMessageEvent.Operation", GroupEssenceMessageEvent_Operation] },
            { no: 4, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupEssenceMessageEvent>): GroupEssenceMessageEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.messageId = "";
        message.operation = 0;
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupEssenceMessageEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupEssenceMessageEvent): GroupEssenceMessageEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                case /* Laana.GroupEssenceMessageEvent.Operation operation */ 3:
                    message.operation = reader.int32();
                    break;
                case /* string operatorUin */ 4:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupEssenceMessageEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        /* Laana.GroupEssenceMessageEvent.Operation operation = 3; */
        if (message.operation !== 0)
            writer.tag(3, WireType.Varint).int32(message.operation);
        /* string operatorUin = 4; */
        if (message.operatorUin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupEssenceMessageEvent
 */
export const GroupEssenceMessageEvent = new GroupEssenceMessageEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMemberCardChangeEvent$Type extends MessageType<GroupMemberCardChangeEvent> {
    constructor() {
        super("Laana.GroupMemberCardChangeEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "targetUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "newCard", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oldCard", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "operatorUin", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMemberCardChangeEvent>): GroupMemberCardChangeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.targetUin = "";
        message.newCard = "";
        message.oldCard = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMemberCardChangeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMemberCardChangeEvent): GroupMemberCardChangeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string targetUin */ 2:
                    message.targetUin = reader.string();
                    break;
                case /* string newCard */ 3:
                    message.newCard = reader.string();
                    break;
                case /* string oldCard */ 4:
                    message.oldCard = reader.string();
                    break;
                case /* optional string operatorUin */ 5:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMemberCardChangeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string targetUin = 2; */
        if (message.targetUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetUin);
        /* string newCard = 3; */
        if (message.newCard !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newCard);
        /* string oldCard = 4; */
        if (message.oldCard !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.oldCard);
        /* optional string operatorUin = 5; */
        if (message.operatorUin !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupMemberCardChangeEvent
 */
export const GroupMemberCardChangeEvent = new GroupMemberCardChangeEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMemberIncreaseEvent$Type extends MessageType<GroupMemberIncreaseEvent> {
    constructor() {
        super("Laana.GroupMemberIncreaseEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "newMemberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operatorUin", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "invitorUin", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMemberIncreaseEvent>): GroupMemberIncreaseEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.newMemberUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMemberIncreaseEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMemberIncreaseEvent): GroupMemberIncreaseEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string newMemberUin */ 2:
                    message.newMemberUin = reader.string();
                    break;
                case /* optional string operatorUin */ 3:
                    message.operatorUin = reader.string();
                    break;
                case /* optional string invitorUin */ 4:
                    message.invitorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMemberIncreaseEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string newMemberUin = 2; */
        if (message.newMemberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newMemberUin);
        /* optional string operatorUin = 3; */
        if (message.operatorUin !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.operatorUin);
        /* optional string invitorUin = 4; */
        if (message.invitorUin !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.invitorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupMemberIncreaseEvent
 */
export const GroupMemberIncreaseEvent = new GroupMemberIncreaseEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMemberDecreaseEvent$Type extends MessageType<GroupMemberDecreaseEvent> {
    constructor() {
        super("Laana.GroupMemberDecreaseEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "oldMemberUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operatorUin", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMemberDecreaseEvent>): GroupMemberDecreaseEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.oldMemberUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMemberDecreaseEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMemberDecreaseEvent): GroupMemberDecreaseEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string oldMemberUin */ 2:
                    message.oldMemberUin = reader.string();
                    break;
                case /* optional string operatorUin */ 3:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMemberDecreaseEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string oldMemberUin = 2; */
        if (message.oldMemberUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldMemberUin);
        /* optional string operatorUin = 3; */
        if (message.operatorUin !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupMemberDecreaseEvent
 */
export const GroupMemberDecreaseEvent = new GroupMemberDecreaseEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMemberTitleChangeEvent$Type extends MessageType<GroupMemberTitleChangeEvent> {
    constructor() {
        super("Laana.GroupMemberTitleChangeEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "targetUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "newTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oldTitle", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMemberTitleChangeEvent>): GroupMemberTitleChangeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.targetUin = "";
        message.newTitle = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMemberTitleChangeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMemberTitleChangeEvent): GroupMemberTitleChangeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string targetUin */ 2:
                    message.targetUin = reader.string();
                    break;
                case /* string newTitle */ 3:
                    message.newTitle = reader.string();
                    break;
                case /* optional string oldTitle */ 4:
                    message.oldTitle = reader.string();
                    break;
                case /* string operatorUin */ 5:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMemberTitleChangeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string targetUin = 2; */
        if (message.targetUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetUin);
        /* string newTitle = 3; */
        if (message.newTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newTitle);
        /* optional string oldTitle = 4; */
        if (message.oldTitle !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.oldTitle);
        /* string operatorUin = 5; */
        if (message.operatorUin !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupMemberTitleChangeEvent
 */
export const GroupMemberTitleChangeEvent = new GroupMemberTitleChangeEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMessageWithdrawEvent$Type extends MessageType<GroupMessageWithdrawEvent> {
    constructor() {
        super("Laana.GroupMessageWithdrawEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMessageWithdrawEvent>): GroupMessageWithdrawEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.messageId = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMessageWithdrawEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMessageWithdrawEvent): GroupMessageWithdrawEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                case /* string operatorUin */ 3:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMessageWithdrawEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        /* string operatorUin = 3; */
        if (message.operatorUin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupMessageWithdrawEvent
 */
export const GroupMessageWithdrawEvent = new GroupMessageWithdrawEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupShutUpMemberEvent$Type extends MessageType<GroupShutUpMemberEvent> {
    constructor() {
        super("Laana.GroupShutUpMemberEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "targetUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupShutUpMemberEvent>): GroupShutUpMemberEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.targetUin = "";
        message.duration = 0;
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupShutUpMemberEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupShutUpMemberEvent): GroupShutUpMemberEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string targetUin */ 2:
                    message.targetUin = reader.string();
                    break;
                case /* uint32 duration */ 3:
                    message.duration = reader.uint32();
                    break;
                case /* string operatorUin */ 4:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupShutUpMemberEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string targetUin = 2; */
        if (message.targetUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetUin);
        /* uint32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).uint32(message.duration);
        /* string operatorUin = 4; */
        if (message.operatorUin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupShutUpMemberEvent
 */
export const GroupShutUpMemberEvent = new GroupShutUpMemberEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupShutUpAllEvent$Type extends MessageType<GroupShutUpAllEvent> {
    constructor() {
        super("Laana.GroupShutUpAllEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupShutUpAllEvent>): GroupShutUpAllEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupShutUpAllEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupShutUpAllEvent): GroupShutUpAllEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string operatorUin */ 2:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupShutUpAllEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string operatorUin = 2; */
        if (message.operatorUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupShutUpAllEvent
 */
export const GroupShutUpAllEvent = new GroupShutUpAllEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLiftShutUpMemberEvent$Type extends MessageType<GroupLiftShutUpMemberEvent> {
    constructor() {
        super("Laana.GroupLiftShutUpMemberEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "targetUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupLiftShutUpMemberEvent>): GroupLiftShutUpMemberEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.targetUin = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupLiftShutUpMemberEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLiftShutUpMemberEvent): GroupLiftShutUpMemberEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string targetUin */ 2:
                    message.targetUin = reader.string();
                    break;
                case /* string operatorUin */ 3:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLiftShutUpMemberEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string targetUin = 2; */
        if (message.targetUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetUin);
        /* string operatorUin = 3; */
        if (message.operatorUin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupLiftShutUpMemberEvent
 */
export const GroupLiftShutUpMemberEvent = new GroupLiftShutUpMemberEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLiftShutUpAllEvent$Type extends MessageType<GroupLiftShutUpAllEvent> {
    constructor() {
        super("Laana.GroupLiftShutUpAllEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupLiftShutUpAllEvent>): GroupLiftShutUpAllEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupLiftShutUpAllEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLiftShutUpAllEvent): GroupLiftShutUpAllEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string operatorUin */ 2:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLiftShutUpAllEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string operatorUin = 2; */
        if (message.operatorUin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupLiftShutUpAllEvent
 */
export const GroupLiftShutUpAllEvent = new GroupLiftShutUpAllEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupEmojiLikeEvent$Type extends MessageType<GroupEmojiLikeEvent> {
    constructor() {
        super("Laana.GroupEmojiLikeEvent", [
            { no: 1, name: "groupCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "emojiId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "operation", kind: "enum", T: () => ["Laana.GroupEmojiLikeEvent.Operation", GroupEmojiLikeEvent_Operation] },
            { no: 5, name: "operatorUin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupEmojiLikeEvent>): GroupEmojiLikeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupCode = "";
        message.messageId = "";
        message.emojiId = "";
        message.operation = 0;
        message.operatorUin = "";
        if (value !== undefined)
            reflectionMergePartial<GroupEmojiLikeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupEmojiLikeEvent): GroupEmojiLikeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string groupCode */ 1:
                    message.groupCode = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                case /* string emojiId */ 3:
                    message.emojiId = reader.string();
                    break;
                case /* Laana.GroupEmojiLikeEvent.Operation operation */ 4:
                    message.operation = reader.int32();
                    break;
                case /* string operatorUin */ 5:
                    message.operatorUin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupEmojiLikeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string groupCode = 1; */
        if (message.groupCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupCode);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        /* string emojiId = 3; */
        if (message.emojiId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.emojiId);
        /* Laana.GroupEmojiLikeEvent.Operation operation = 4; */
        if (message.operation !== 0)
            writer.tag(4, WireType.Varint).int32(message.operation);
        /* string operatorUin = 5; */
        if (message.operatorUin !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.operatorUin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Laana.GroupEmojiLikeEvent
 */
export const GroupEmojiLikeEvent = new GroupEmojiLikeEvent$Type();
